<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丰木木de学习计划</title>
  
  <subtitle>We are here to put a dent in the universe</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengmumu1.github.io/"/>
  <updated>2018-07-12T13:15:31.820Z</updated>
  <id>https://fengmumu1.github.io/</id>
  
  <author>
    <name>丰林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo上传报错:No such device or address</title>
    <link href="https://fengmumu1.github.io/2018/07/12/no-address/"/>
    <id>https://fengmumu1.github.io/2018/07/12/no-address/</id>
    <published>2018-07-12T13:03:34.000Z</published>
    <updated>2018-07-12T13:15:31.820Z</updated>
    
    <content type="html"><![CDATA[<p>今天使用hexo上传，报错(bash: /dev/tty: No such device or address)<br>个人推测和网络有关（网太慢了），但是不想等，所以就搜了一下解决方法<br><a id="more"></a><br>就是在站点配置的上传设置，把地址改一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: https://github.com/你GitHub注册用户名/你GitHub注册用户名.github.io.git </span><br><span class="line">  branch: master</span><br><span class="line"></span><br><span class="line">　　改为：</span><br><span class="line"></span><br><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: git@github.com:你GitHub注册用户名/你GitHub注册用户名.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>个人推测，由于网络不好，所以触发github的安全机制，所以提交失败，改设置之后，由原来的https提交变成了使用ssh来提交，就比较好通过了。</p><hr><p><a href="https://www.cnblogs.com/huahua12/p/8491805.html" target="_blank" rel="noopener">解决方法原文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天使用hexo上传，报错(bash: /dev/tty: No such device or address)&lt;br&gt;个人推测和网络有关（网太慢了），但是不想等，所以就搜了一下解决方法&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://fengmumu1.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://fengmumu1.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>数字转成字母</title>
    <link href="https://fengmumu1.github.io/2018/07/12/Integer-to-English-Words/"/>
    <id>https://fengmumu1.github.io/2018/07/12/Integer-to-English-Words/</id>
    <published>2018-07-12T12:34:26.000Z</published>
    <updated>2018-07-12T12:49:50.805Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个有小坑的题目 Integer to English Words<br>题目要求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.</span><br><span class="line"></span><br><span class="line">Example 1:</span><br><span class="line">Input: 123</span><br><span class="line">Output: &quot;One Hundred Twenty Three&quot;</span><br><span class="line"></span><br><span class="line">Example 2:</span><br><span class="line">Input: 12345</span><br><span class="line">Output: &quot;Twelve Thousand Three Hundred Forty Five&quot;</span><br><span class="line"></span><br><span class="line">Example 3:</span><br><span class="line">Input: 1234567</span><br><span class="line">Output: &quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&quot;</span><br><span class="line"></span><br><span class="line">Example 4:</span><br><span class="line">Input: 1234567891</span><br><span class="line">Output: &quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&quot;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>就是把一串数字按照英语语法格式输出成字符串的形式。英语不同于汉语，是3个一断。<br><blockquote><p>汉语和英语数字表达的方式不同。汉语是个，十，百，千，万，十万，百万，千万，亿，十亿……，也就是以“十”的倍数来表示；而英语则是在数字超过千以后，以“千”(thousand)的倍数来表达的。如“一万”是“十千”，即 ten thousand；“十万”是“百千”，即 hundred thousand，直至“百万”，million。百万以上的数字则用“百万”的倍数表达；如“千万”是“十百万”，即 ten million；“亿”是“百百万”，即 hundred million，直至“十亿”，billion。 所以英文表达数字时可以从右往左，三位一逗号，逗号从右往左分别对应的是：thousand, million, billion, etc。</p><footer><strong>@沪江英语</strong><cite><a href="https://www.hjenglish.com/new/p110563/" target="_blank" rel="noopener">www.hjenglish.com/new/p110563</a></cite></footer></blockquote><br>所以程序并不难想，思路也没有那么难，写完之后，一提交发现坑了，丫的最后面不能有空格，改了半天，最后实现了功能，发现代码很长，最后用了自带的函数trim，来去掉了多余的空格，代码也就将就算是自己能看过眼吧。<br>下面是丑代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberToWords = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//debugger</span></span><br><span class="line">  <span class="keyword">if</span>(num === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">'Zero'</span></span><br><span class="line">  <span class="keyword">let</span> cous = <span class="string">""</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> a = [<span class="string">""</span>,<span class="string">" One"</span>, <span class="string">" Two"</span>, <span class="string">" Three"</span>, <span class="string">" Four"</span>, <span class="string">" Five"</span>, <span class="string">" Six"</span>, <span class="string">" Seven"</span>, <span class="string">" Eight"</span>,<span class="string">" Nine"</span>, <span class="string">" Ten"</span>, <span class="string">" Eleven"</span>, <span class="string">" Twelve"</span>, <span class="string">" Thirteen"</span>, <span class="string">" Fourteen"</span>, <span class="string">" Fifteen"</span>, <span class="string">" Sixteen"</span>, <span class="string">" Seventeen"</span>, <span class="string">" Eighteen"</span>, <span class="string">" Nineteen"</span>]</span><br><span class="line">  <span class="keyword">let</span> b = [<span class="string">""</span>,<span class="string">""</span>,<span class="string">" Twenty"</span>, <span class="string">" Thirty"</span>, <span class="string">" Forty"</span>, <span class="string">" Fifty"</span>, <span class="string">" Sixty"</span>, <span class="string">" Seventy"</span>, <span class="string">" Eighty"</span>, <span class="string">" Ninety"</span>]</span><br><span class="line">  <span class="keyword">let</span> c = [<span class="string">""</span>,<span class="string">" Thousand"</span>, <span class="string">" Million"</span>, <span class="string">" Billion"</span>]</span><br><span class="line">  <span class="keyword">let</span> thereword = <span class="function"><span class="keyword">function</span> (<span class="params">numb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numb === <span class="number">0</span>) <span class="keyword">return</span> <span class="string">""</span> </span><br><span class="line">    <span class="keyword">let</span> num_temp = <span class="string">""</span></span><br><span class="line">   <span class="comment">// debugger</span></span><br><span class="line">    <span class="keyword">if</span>(numb &gt; <span class="number">99</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(numb % <span class="number">100</span> &gt; <span class="number">19</span>) &#123; </span><br><span class="line">        num_temp = a[<span class="built_in">parseInt</span>(numb / <span class="number">100</span>)] + <span class="string">" Hundred"</span> + b[<span class="built_in">parseInt</span>((numb % <span class="number">100</span>) / <span class="number">10</span>)] + a[<span class="built_in">parseInt</span>((numb % <span class="number">100</span>) % <span class="number">10</span>)]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        num_temp = a[<span class="built_in">parseInt</span>(numb / <span class="number">100</span>)] + <span class="string">" Hundred"</span> + a[numb % <span class="number">100</span>] </span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(numb &gt; <span class="number">19</span>) &#123;</span><br><span class="line">        num_temp = b[<span class="built_in">parseInt</span>(numb / <span class="number">10</span>)] + a[numb % <span class="number">10</span>]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        num_temp = a[numb]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num_temp</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">while</span>(num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> nums = thereword(num % <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">if</span>(nums !== <span class="string">""</span>) &#123;</span><br><span class="line">       cous =  nums + c[index] + cous</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       cous =  nums + cous</span><br><span class="line">    &#125;      </span><br><span class="line">    num = (num - num % <span class="number">1000</span>) / <span class="number">1000</span>   </span><br><span class="line">    index++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cous.trim()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><p><strong>以后需要注意更多的细节要求</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现一个有小坑的题目 Integer to English Words&lt;br&gt;题目要求：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Convert a non-negative integer to its english words representation. Given input is guaranteed to be less than 231 - 1.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 1:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;One Hundred Twenty Three&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 2:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 12345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;Twelve Thousand Three Hundred Forty Five&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 3:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 1234567&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Example 4:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Input: 1234567891&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output: &amp;quot;One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent_JavaScrip中的weresquirrel</title>
    <link href="https://fengmumu1.github.io/2018/07/12/Eloquent-JavaScript-of-weresquirrel/"/>
    <id>https://fengmumu1.github.io/2018/07/12/Eloquent-JavaScript-of-weresquirrel/</id>
    <published>2018-07-12T02:46:30.000Z</published>
    <updated>2018-07-12T02:53:08.043Z</updated>
    
    <content type="html"><![CDATA[<p>看到了Eloquent_JavaScrip第四章（对象和数组）），这一章讲了一个松鼠人(weresquirrel)的故事，并用函数来找出其变身的原因，感觉很有趣，便动手实现了一下。<a href="https://github.com/marijnh/Eloquent-JavaScript/blob/master/code/journal.js" target="_blank" rel="noopener">数据连接</a><br><a id="more"></a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> JOURNAL = [</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"exercise"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"pudding"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"nachos"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"cycling"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brussel sprouts"</span>,<span class="string">"ice cream"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"computer"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"candy"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"exercise"</span>,<span class="string">"weekend"</span>,<span class="string">"dentist"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brussel sprouts"</span>,<span class="string">"pudding"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"computer"</span>,<span class="string">"work"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"beer"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"cycling"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"cycling"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"nachos"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lettuce"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"television"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brushed teeth"</span>,<span class="string">"computer"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lettuce"</span>,<span class="string">"nachos"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"reading"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"exercise"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"reading"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"ice cream"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"television"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"nachos"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"ice cream"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"cycling"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"peanuts"</span>,<span class="string">"computer"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"ice cream"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"computer"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"ice cream"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"exercise"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"ice cream"</span>,<span class="string">"computer"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"ice cream"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"candy"</span>,<span class="string">"reading"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"nachos"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"beer"</span>,<span class="string">"work"</span>,<span class="string">"dentist"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"pudding"</span>,<span class="string">"cycling"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"reading"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"pudding"</span>,<span class="string">"television"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"exercise"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"peanuts"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"exercise"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brushed teeth"</span>,<span class="string">"exercise"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"television"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"cycling"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"beer"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"peanuts"</span>,<span class="string">"candy"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"reading"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"nachos"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"exercise"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"television"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"cycling"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"computer"</span>,<span class="string">"work"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lettuce"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"television"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"computer"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"candy"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"nachos"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"pudding"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"exercise"</span>,<span class="string">"weekend"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brussel sprouts"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lettuce"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"candy"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brussel sprouts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"computer"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"candy"</span>,<span class="string">"television"</span>,<span class="string">"work"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"pudding"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lettuce"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"ice cream"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"cycling"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"spaghetti"</span>,<span class="string">"peanuts"</span>,<span class="string">"exercise"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"beer"</span>,<span class="string">"computer"</span>,<span class="string">"weekend"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lettuce"</span>,<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"television"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"reading"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"carrot"</span>,<span class="string">"peanuts"</span>,<span class="string">"reading"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"potatoes"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lasagna"</span>,<span class="string">"ice cream"</span>,<span class="string">"work"</span>,<span class="string">"touched tree"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"cycling"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"pizza"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"running"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"lettuce"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"work"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"bread"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"television"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="string">"events"</span>:[<span class="string">"cauliflower"</span>,<span class="string">"peanuts"</span>,<span class="string">"brushed teeth"</span>,<span class="string">"weekend"</span>],<span class="string">"squirrel"</span>:<span class="literal">false</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断是否有事件</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125;event 事件名称</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125;entry   事件记录</span></span><br><span class="line"><span class="comment"> * @return &#123;Boolean&#125;      true是有 false是没有 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isEvent = <span class="function"><span class="keyword">function</span>(<span class="params">event, entry</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//indexOf查找不到就返回-1，注意，在Bolean中false为0，所有非0 的都是true</span></span><br><span class="line">  <span class="keyword">return</span> entry.indexOf(event) !== <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算两件事件的相关性</span></span><br><span class="line"><span class="comment"> * @param &#123;Number[]&#125; record_tab ab 发生与否记作0和1，然后统计所有的情况记成数组</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;&#125;  二者的相关性[-1,1],使用了内置函数保留10为有效数字所以转化成了字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> phi = <span class="function"><span class="keyword">function</span>(<span class="params">record_tab</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> temp = <span class="built_in">Math</span>.sqrt(</span><br><span class="line">                      (record_tab[<span class="number">2</span>] + record_tab[<span class="number">3</span>]) * </span><br><span class="line">                      (record_tab[<span class="number">1</span>] + record_tab[<span class="number">3</span>]) * </span><br><span class="line">                      (record_tab[<span class="number">0</span>] + record_tab[<span class="number">1</span>]) * </span><br><span class="line">                      (record_tab[<span class="number">0</span>] + record_tab[<span class="number">2</span>]) )</span><br><span class="line">  <span class="keyword">return</span> ((record_tab[<span class="number">3</span>] * record_tab[<span class="number">0</span>] - record_tab[<span class="number">2</span>] * record_tab[<span class="number">1</span>]) /  temp).toFixed(<span class="number">10</span>) </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计事件与是否变身的相关性</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; event 事件名称 </span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; tab   事件记录</span></span><br><span class="line"><span class="comment"> * @return  &#123;Number&#125; 事件与变身的相关性[-1,1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sth_pertinence = <span class="function"><span class="keyword">function</span>(<span class="params">event, tab</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> phi_tab = [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tab.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span>(isEvent(event,tab[i].events)) &#123;index++&#125;</span><br><span class="line">    <span class="keyword">if</span>(tab[i].squirrel) &#123;index += <span class="number">2</span>&#125;</span><br><span class="line">    phi_tab[index]++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> phi(phi_tab)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 相关性映射表</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; tabs 记录表</span></span><br><span class="line"><span class="comment"> * @return &#123;object&#125; 相关性映射表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> map_pertinence = <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> map = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tabs.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; tabs[i].events.length; j++)&#123;</span><br><span class="line">      <span class="keyword">if</span>( ! (tabs[i].events[j] <span class="keyword">in</span> map)) &#123;</span><br><span class="line">        map[tabs[i].events[j]] = <span class="built_in">Number</span>(sth_pertinence(tabs[i].events[j] ,JOURNAL)) </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 找出相关项</span></span><br><span class="line"><span class="comment"> * @param &#123;object&#125; map 相关性映射表</span></span><br><span class="line"><span class="comment"> * @return  &#123;string&#125; 分析结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reous_pertinence = <span class="function"><span class="keyword">function</span>(<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tab_phi = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> reous = &#123;</span><br><span class="line">    max_tab : <span class="string">""</span>,</span><br><span class="line">    max_phi : -<span class="literal">Infinity</span> ,</span><br><span class="line">    min_tab : <span class="string">""</span>,</span><br><span class="line">    min_phi : <span class="literal">Infinity</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> end_resou = <span class="string">""</span></span><br><span class="line">  tab_phi = map_pertinence(JOURNAL)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> event <span class="keyword">in</span> tab_phi) &#123; </span><br><span class="line">    <span class="keyword">if</span>(tab_phi[event] &lt;  reous.min_phi ) &#123;</span><br><span class="line">      reous.min_tab = event </span><br><span class="line">      reous.min_phi = tab_phi[event]</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(tab_phi[event] &gt; reous.max_phi) &#123;</span><br><span class="line">      reous.max_tab = event </span><br><span class="line">      reous.max_phi = tab_phi[event] </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> end_resou = reous.max_tab + <span class="string">"  no"</span> + reous.min_tab</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; JOURNAL.length ; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEvent(reous.max_tab,JOURNAL[i].events) &amp;&amp; !isEvent(reous.min_tab,JOURNAL[i].events) )&#123;</span><br><span class="line">      JOURNAL[i].events.push(end_resou)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> end_resou +<span class="string">"  pshi:  "</span>+ sth_pertinence(end_resou,JOURNAL)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reous_pertinence())</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到了Eloquent_JavaScrip第四章（对象和数组）），这一章讲了一个松鼠人(weresquirrel)的故事，并用函数来找出其变身的原因，感觉很有趣，便动手实现了一下。&lt;a href=&quot;https://github.com/marijnh/Eloquent-JavaScript/blob/master/code/journal.js&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;数据连接&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/tags/JavaScript/"/>
    
      <category term="杂谈" scheme="https://fengmumu1.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>丑数2之自己挖坑埋自己</title>
    <link href="https://fengmumu1.github.io/2018/07/09/Ugly-Number-II/"/>
    <id>https://fengmumu1.github.io/2018/07/09/Ugly-Number-II/</id>
    <published>2018-07-09T14:39:21.000Z</published>
    <updated>2018-07-09T15:06:12.679Z</updated>
    
    <content type="html"><![CDATA[<p>今天做了丑数2，遇到个坑，卡主自己好久，所以make先，以后有空再仔细研究<br><a id="more"></a><br>先上题目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Write a program to find the n-th ugly number.</span><br><span class="line"></span><br><span class="line">Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. </span><br><span class="line"></span><br><span class="line">Example:</span><br><span class="line"></span><br><span class="line">Input: n = 10</span><br><span class="line">Output: 12</span><br><span class="line">Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.</span><br><span class="line"></span><br><span class="line">Note:  </span><br><span class="line">  1 is typically treated as an ugly number.</span><br><span class="line">  n does not exceed 1690.</span><br></pre></td></tr></table></figure></p><p>先给出我最终通过的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nthUglyNumber = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"> <span class="comment">//debugger</span></span><br><span class="line">  <span class="keyword">var</span> arry = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arry_two   = [<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> arry_three = [<span class="number">3</span>]</span><br><span class="line">  <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> arry_five  = [<span class="number">5</span>]</span><br><span class="line">  <span class="keyword">var</span> k = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = arry_two[i]</span><br><span class="line">  <span class="keyword">var</span> b = arry_three[i]</span><br><span class="line">  <span class="keyword">var</span> c = arry_five[i]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a &lt; b &amp;&amp; a &lt; c) &#123;</span><br><span class="line">      arry_two.push(a * <span class="number">2</span>)</span><br><span class="line">      arry_three.push(a * <span class="number">3</span>)</span><br><span class="line">      arry_five.push(a * <span class="number">5</span>)</span><br><span class="line">      arry.push(a)</span><br><span class="line"></span><br><span class="line">      a = arry_two[i += <span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(b &lt; a &amp;&amp; b &lt; c ) &#123;</span><br><span class="line">      arry_three.push(b * <span class="number">3</span>)</span><br><span class="line">      arry_five.push(b * <span class="number">5</span>)</span><br><span class="line">      arry.push(b)</span><br><span class="line"></span><br><span class="line">      b = arry_three[j += <span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; a &amp;&amp; c &lt; b) &#123;</span><br><span class="line">      arry_five.push(c * <span class="number">5</span>) </span><br><span class="line">      arry.push(c)</span><br><span class="line"></span><br><span class="line">      c = arry_five[k += <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(arry.length + <span class="number">1</span> === n) <span class="keyword">break</span> </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//console.log(arry)</span></span><br><span class="line">  <span class="keyword">return</span> arry[n - <span class="number">2</span>] <span class="comment">//减去 0和 1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(nthUglyNumber(5))</span></span><br></pre></td></tr></table></figure></p><p>现在来分析一下解决这个题目的思路：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">丑数就是只由2 3 5 乘出来的数字，我们定义三个数组，我们每次三个数组最小的数字，在第一组就分别乘以 2 3 5 放入 三个数组 </span><br><span class="line">arry_two      2     </span><br><span class="line">arry_three    3  </span><br><span class="line">arry_five     5</span><br><span class="line"></span><br><span class="line">arry_two      2   4</span><br><span class="line">arry_three    3   6</span><br><span class="line">arry_five     5   10</span><br><span class="line">然后我们把最小的取出来</span><br><span class="line">arry_two      x   4</span><br><span class="line">arry_three    3   6</span><br><span class="line">arry_five     5   10</span><br><span class="line">此时最小的是3，他位于第二个数组，我们给他 乘以3和5分别放入第二个和第三个数组</span><br><span class="line">arry_two      x   4   </span><br><span class="line">arry_three    3   6   9</span><br><span class="line">arry_five     5   10  15</span><br><span class="line">我们去出3，此时最小的是4，4 位于第一个数组，我们乘以2 3 5 后分别放入三个数组</span><br><span class="line">arry_two      x   4   8    </span><br><span class="line">arry_three    x   6   9   12</span><br><span class="line">arry_five     5   10  15  20</span><br><span class="line">我们拿去4 后最小的是5，然后我们 给5 乘以5放入第三个数组</span><br><span class="line">arry_two      x   x   8    </span><br><span class="line">arry_three    x   6   9   12</span><br><span class="line">arry_five     5   10  15  20  25</span><br><span class="line"></span><br><span class="line">然后我们把每次拿出来的数字，放到一个数组，就是从2开始的丑数啦</span><br></pre></td></tr></table></figure></p><p>在再放出我一开始的问题程序：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nthUglyNumber = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//debugger</span></span><br><span class="line">  <span class="keyword">var</span> ff = n</span><br><span class="line">  n = n + <span class="number">150</span></span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">4</span> <span class="comment">//1也是丑数</span></span><br><span class="line">  <span class="keyword">var</span> arry = []</span><br><span class="line">  <span class="keyword">var</span> arry_temp = []</span><br><span class="line">  <span class="keyword">var</span> arry_two   = [<span class="number">2</span>]</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> arry_three = [<span class="number">3</span>]</span><br><span class="line">  <span class="keyword">var</span> j = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> arry_five  = [<span class="number">5</span>]</span><br><span class="line">  <span class="keyword">var</span> k = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = arry_two[i]</span><br><span class="line">  <span class="keyword">var</span> b = arry_three[i]</span><br><span class="line">  <span class="keyword">var</span> c = arry_five[i]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ff &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> ff</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ( a &lt; b &amp;&amp; a &lt; c) &#123;</span><br><span class="line">      arry_two.push(a * <span class="number">2</span>)</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span>(count === n) <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line">      arry_three.push(a * <span class="number">3</span>)</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span>(count === n) <span class="keyword">break</span> </span><br><span class="line">      </span><br><span class="line">      arry_five.push(a * <span class="number">5</span>)</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span>(count === n) <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line">      a = arry_two[i += <span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(b &lt; a &amp;&amp; b &lt; c ) &#123;</span><br><span class="line">      arry_three.push(b * <span class="number">3</span>)</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span>(count === n) <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line">      arry_five.push(b * <span class="number">5</span>)</span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span>(count === n) <span class="keyword">break</span>  </span><br><span class="line"></span><br><span class="line">      b = arry_three[j += <span class="number">1</span>]</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &lt; a &amp;&amp; c &lt; b) &#123;</span><br><span class="line">      arry_five.push(c * <span class="number">5</span>) </span><br><span class="line">      count++</span><br><span class="line">      <span class="keyword">if</span>(count === n) <span class="keyword">break</span> </span><br><span class="line"></span><br><span class="line">      c = arry_five[k += <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  arry_temp = arry_two.concat(arry_three)</span><br><span class="line">  arry = arry_temp.concat(arry_five)</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sortNumber</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b</span><br><span class="line">  &#125;</span><br><span class="line">  arry.sort(sortNumber)</span><br><span class="line">  <span class="comment">//console.log(arry)</span></span><br><span class="line">  <span class="keyword">return</span> arry[n - <span class="number">152</span>] <span class="comment">//多算了x个 减去 0和 1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这个程序的思路没有放在取出来的丑数上，而是放在了求出来的丑数上，我计算出目前算了多少个丑数，比如要10个我就计算10个，结果发现求出来的并没有按顺序（中间有空缺），比如算10个丑数，其实只计算到了15，计算第11个丑数的时候才把12计算出来，当时头脑一发热，好不是少计算了，那我多计算好了，所以我们多计算150个，结果在1 和 1690 的时候都对，在(1406,1430)之间不对，其余数字都对，真让人心累，为什么出现这样情况，现在头脑不清楚，有空好好进去瞅瞅，应该还是少计算的原因，不过比他大的数字都是好的，这个就很奇怪了，不过就算这个可以通过测试，比如我多计算500个或者600个。这个思路都是有问题的，不是好思路。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天做了丑数2，遇到个坑，卡主自己好久，所以make先，以后有空再仔细研究&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>line_text</title>
    <link href="https://fengmumu1.github.io/2018/07/08/line-text/"/>
    <id>https://fengmumu1.github.io/2018/07/08/line-text/</id>
    <published>2018-07-08T14:20:58.000Z</published>
    <updated>2018-07-08T14:20:58.283Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>牛顿-拉弗森方法(Newton-Raphson_method)求平方根</title>
    <link href="https://fengmumu1.github.io/2018/07/08/Newton-Raphson-method/"/>
    <id>https://fengmumu1.github.io/2018/07/08/Newton-Raphson-method/</id>
    <published>2018-07-08T04:37:24.000Z</published>
    <updated>2018-07-08T08:35:49.185Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>牛顿法（英语：Newton’s method）又称为牛顿-拉弗森方法（英语：Newton-Raphson method），它是一种在实数域和复数域上近似求解方程的方法。方法使用函数 {\displaystyle f(x)} f(x)的泰勒级数的前面几项来寻找方程 {\displaystyle f(y)=0} {\displaystyle f(y)=0}的根。</p><footer><strong>维基解密 @https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95</strong></footer></blockquote><a id="more"></a><p>再leetcode上看到这么一道题，题目很简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sqrt(x)</span><br><span class="line">Implement int sqrt(int x).</span><br><span class="line">Compute and return the square root of x, where x is guaranteed to be a non-negative integer.</span><br><span class="line">Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</span><br></pre></td></tr></table></figure></p><p>就是求一个数字的平方根，嗯题目没有截取完整们对于开方开出来是小数的，直接抛弃小数位（不是四舍五入）。<br>解题思路可以有很多，比较快的就是牛顿法了，一开始没有一下子想通牛顿法咋做，后来想通啦，所以就记录一下。<br>首先我们列一个关于被开方数z（在程序中是入口参数x）以及开放根x1的方程，x1 * x1 - z = y,我们把它记成F(x),当 y === 0 的时候说明x1为z的开放根。我们把他的图像画出来，图像如下（图是我从维基百科上偷得，自己的灵魂画图太丑了）</p><img src="/2018/07/08/Newton-Raphson-method/NR2.jpg" width="400" height="200"><p>我们在x轴上找一点x0，过xo在F(x)的位置上做一条切线L1，我们可以看到L1与x轴的交点x1是逐渐逼近与F(x)与x轴的交点的，而这个交点也就是我们要求的开放根，然后我们继续做过x1在F(x)上的切线我们得到x2，不断的迭代下去，我们就可以得到一个符合我们要求的精确范围内的开放根。<br>现在我们需要用函数来写出来，我们想到了递归，但是想一下递归的空间复杂度，所以我们用循环来做，我们只需要不断的求x直到x满足要求的精度我们就跳出循环。<br>让我们来想一下我们如何通过现在的x来的出下一个x1呢？<br>我们看图像L1是F(x)在x0处的切线，那么这条切线的斜率就是F(x)的导函数在x0的结果。 现在我们这样子看一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">原函数F(x)： x1 *x1 - z  </span><br><span class="line">原函数的导函数f&apos;(x): 2 * x1</span><br><span class="line">过x0的切线的方程我们设为：y = k*x + b </span><br><span class="line"></span><br><span class="line">现在带入x0在此处的斜率和y</span><br><span class="line">     k = 2 * x0</span><br><span class="line">     y = x0 * x0 - z</span><br><span class="line">我们得b = x0 * x0 - z  - 2 * x0 * x0</span><br><span class="line">所以得到x0的方程是 ：</span><br><span class="line">     y = 2 * x0 * x  +  x0 * x0 - z - 2 * x0 * x0</span><br><span class="line">       = 2 * x0 * x - z - x0 * x0</span><br><span class="line">我们可以看到，L1与x轴相交的点就是我们要求的x1，此时y = 0，所以x1 = （x0  * x0 + z）/ (2 * x0 * 10)</span><br></pre></td></tr></table></figure></p><p>然后的出的x1不满足精确度，我们就把x1带入上面的式子，得出x2，然后不断迭代。代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySqrt = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cout = <span class="number">2</span></span><br><span class="line">     <span class="keyword">while</span> (<span class="built_in">Math</span>.abs(cout ** <span class="number">2</span> - x) &gt; <span class="number">0.0000001</span>) &#123;</span><br><span class="line">        cout = (cout ** <span class="number">2</span> + x) / (<span class="number">2</span> * cout)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="built_in">parseInt</span>(cout)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;牛顿法（英语：Newton’s method）又称为牛顿-拉弗森方法（英语：Newton-Raphson method），它是一种在实数域和复数域上近似求解方程的方法。方法使用函数 {\displaystyle f(x)} f(x)的泰勒级数的前面几项来寻找方程 {\displaystyle f(y)=0} {\displaystyle f(y)=0}的根。&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;维基解密 @https://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode之Counting_Bits</title>
    <link href="https://fengmumu1.github.io/2018/07/07/Counting-Bits/"/>
    <id>https://fengmumu1.github.io/2018/07/07/Counting-Bits/</id>
    <published>2018-07-07T14:51:52.000Z</published>
    <updated>2018-07-07T15:04:43.102Z</updated>
    
    <content type="html"><![CDATA[<p>Counting_Bits<br>Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.</p><p>Example:<br>For num = 5 you should return [0,1,1,2,1,2].</p><p>Follow up:<br>    It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?<br>    Space complexity should be O(n).<br>    Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.<br>Credits:<br>Special thanks to @ syedee for adding this problem and creating all test cases.<br><a id="more"></a><br>题目如上，就是给你一个数字，让给输出从0到这个数字之间所有数字转化为二进制后1的个数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 0    0000    0                </span><br><span class="line">// 1    0001    1   </span><br><span class="line">// 2    0010    1</span><br><span class="line">// 3    0011    2</span><br><span class="line">// 4    0100    1</span><br><span class="line">// 5    0101    2</span><br><span class="line">// 6    0110    2</span><br><span class="line">// 7    0111    3</span><br><span class="line">// -------------        </span><br><span class="line">// 8    1000    1        </span><br><span class="line">// 9    1001    2        </span><br><span class="line">// 10   1010    2        </span><br><span class="line">// 11   1011    3        </span><br><span class="line">// 12   1100    2         </span><br><span class="line">// 13   1101    3</span><br><span class="line">// 14   1110    3</span><br><span class="line">// 15   1111    4</span><br><span class="line">// 16   10000   1</span><br><span class="line">// 17   10001   2</span><br><span class="line"></span><br><span class="line">// 31    1 1111 5</span><br><span class="line">// 63   11 1111 6</span><br></pre></td></tr></table></figure></p><p>解法一：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">debugger</span></span><br><span class="line">     <span class="keyword">var</span> res = [<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= num; ++i) &#123;</span><br><span class="line">          <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) res.push(res[<span class="built_in">parseInt</span>(i / <span class="number">2</span>)])</span><br><span class="line">          <span class="keyword">else</span> res.push(res[<span class="built_in">parseInt</span>((i / <span class="number">2</span>))] + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br>解题思路：<br>从1开始，遇到偶数时，其1的个数和该偶数除以2得到的数字的1的个数相同，<br>        遇到奇数时，其1的个数等于该奇数除以2得到的数字的1的个数然后再加上1<br>第二种思路：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">debugger</span></span><br><span class="line">     <span class="keyword">var</span> res = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">1</span>; i &lt;= num; ++i) &#123;</span><br><span class="line">            res[i] = res[i &amp; (i - <span class="number">1</span>)] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><br>解题思路：每个i值都是i&amp;(i-1)对应的值加1 （简单暴力，神奇的n与n-1）</p><hr><p>第二种参考自<a href="https://www.cnblogs.com/grandyang/p/5294255.html" target="_blank" rel="noopener">Grandyangde的博客:</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Counting_Bits&lt;br&gt;Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1’s in their binary representation and return them as an array.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;For num = 5 you should return [0,1,1,2,1,2].&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;    It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?&lt;br&gt;    Space complexity should be O(n).&lt;br&gt;    Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.&lt;br&gt;Credits:&lt;br&gt;Special thanks to @ syedee for adding this problem and creating all test cases.&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>使用ftp方式上传博客</title>
    <link href="https://fengmumu1.github.io/2018/07/07/hexo-ftp/"/>
    <id>https://fengmumu1.github.io/2018/07/07/hexo-ftp/</id>
    <published>2018-07-07T11:00:25.000Z</published>
    <updated>2018-07-07T11:25:08.540Z</updated>
    
    <content type="html"><![CDATA[<p>在github上传博客，有时候会失败，而且速度也很慢，所以就想放到国内的服务器上，怎奈何囊中羞涩买不起服务器，手里正好有个云主机，所以就用ftp的形式上传hexo的静态文件啦<br><a id="more"></a><br>先放上hexo的官方文档的传送门<a href="https://hexo.io/docs/deployment.html#FTPSync" target="_blank" rel="noopener">点我</a><br>先在你的bloge目录运行如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-ftpsync --save</span><br></pre></td></tr></table></figure></p><p>然后在站点配置文件找到<code>deploy:</code><br>我的配置是这样子的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">-  type: git</span><br><span class="line">   repo: xxxxxxxx</span><br><span class="line">   branch: master</span><br><span class="line">-  type: ftpsync</span><br><span class="line">   host: xxxxx           #主机地址</span><br><span class="line">   user: xxxx            #用户名</span><br><span class="line">   pass: xxxx        #密码</span><br><span class="line">   //注意我用的是阿里云的云主机，按照他的规定我必须把文件放到根目录下的htdocs文件夹内</span><br><span class="line">   remote: /htdocs/       #上传到空间的指定目录。比如/public_html/。默认为/</span><br><span class="line">   port: 21            #端口，默认为21</span><br><span class="line">   //logreport 也是云主机的文件，无法删除，需要忽略它，都则会报错</span><br><span class="line">   ignore: [/logreport]        #忽略的文件</span><br><span class="line">   connections: 1  #使用的连接数，默认1</span><br><span class="line">   verbose: true   #显示调试信息，默认false</span><br></pre></td></tr></table></figure></p><div class="note info"><ul><li>hexo本身支持多站点上传，所以我们不需要删除以前的上传方式，不过注意正确的缩进以及空格</li><li>由于使用ftpsync上传，每次都会删除以前的文件，所以把你没有权限删除的以及不想删除或者<br>修改的文件写到ignore这里，ignore: [“/s”,”/c”]，中间要用逗号隔开，注意路径（引号貌似可以不加） </li></ul></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在github上传博客，有时候会失败，而且速度也很慢，所以就想放到国内的服务器上，怎奈何囊中羞涩买不起服务器，手里正好有个云主机，所以就用ftp的形式上传hexo的静态文件啦&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://fengmumu1.github.io/categories/hexo/"/>
    
    
      <category term="ftp" scheme="https://fengmumu1.github.io/tags/ftp/"/>
    
      <category term="hexo上传" scheme="https://fengmumu1.github.io/tags/hexo%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈立即执行函数</title>
    <link href="https://fengmumu1.github.io/2018/07/06/immediate-execution-function/"/>
    <id>https://fengmumu1.github.io/2018/07/06/immediate-execution-function/</id>
    <published>2018-07-06T11:28:06.000Z</published>
    <updated>2018-07-10T12:40:27.359Z</updated>
    
    <content type="html"><![CDATA[<p>发现一个有意思的问题，有下面一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x + y)</span><br><span class="line">&#125;(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><br>我们把它输入到firebug下的命令控制台里面，回车之后会输出什么？<br><a id="more"></a></p><h3 id="两种函数声明方式"><a href="#两种函数声明方式" class="headerlink" title="两种函数声明方式"></a>两种函数声明方式</h3><p>在解决这个问题之前我们先看一下js的声明方式：</p><h4 id="利用function函数声明（Function-Declaration）语句声明函数"><a href="#利用function函数声明（Function-Declaration）语句声明函数" class="headerlink" title="利用function函数声明（Function Declaration）语句声明函数"></a>利用function函数声明（Function Declaration）语句声明函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用function函数声明语句声明函数,利用此函数声明函数,函数会在所有程序执行之前进行声明，</span></span><br><span class="line"><span class="comment">//也就是说我们可以在function a 这条语句之前调用这个函数</span></span><br><span class="line">a()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"a函数声明"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用函数表达式（Function-Expression）来声明函数"><a href="#使用函数表达式（Function-Expression）来声明函数" class="headerlink" title="使用函数表达式（Function Expression）来声明函数"></a>使用函数表达式（Function Expression）来声明函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用函数表达式来声明一个匿名函数，编译器会先声明一个变量b,</span></span><br><span class="line"><span class="comment">//然后在执行到这个语句的时候，再对=右边的匿名函数进行声明，再把b指向匿名函数</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"b函数声明"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用函数表达式来声明函数，同匿名函数，只不过我们的函数有名字，也就是说c和d指向同一个函数，我们用c或d都可以</span></span><br><span class="line"><span class="comment">//调用这个函数，但是需要注意的是，在执行这条语句之前c的数值是undefine，而d则是未定义（万恶的IE8有[BUG](https://www.jb51.net/onlineread/named-function-expressions-demystified/)）,在这条语句执行后c指向函数d，而d在全局是undefined 因为，其只在函数内部可见，在外部不可见</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"c函数声明"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要区分一个代码是函数声明还是函数表达式，那要看代码的应用上下文。</p><ul><li>如果有运算符号，那它就是函数表达式。</li><li>如果没有运算符号而且不在条件判断语句中，就说明是函数声明，无法直接加()进行调用（运算符包括赋值号跟括号）</li><li>如果在条件语句中，函数声明也会强行被当做函数表达式执行。</li></ul><footer><strong>@Kelichao</strong><cite><a href="https://github.com/Kelichao/javascript.basics/issues/19" target="_blank" rel="noopener">github.com/Kelichao/javascript.basics/issues/19</a></cite></footer></blockquote><div class="note danger"><p>注意我们如果需要向下面这样声明函数,会在不同浏览器下得到不同结果<br>undefined</p><p>我们应该是用函数表达式声明，就可以的得到对的结果 </p></div><h3 id="立即执行函数（Immediately-Invoked-Function-Expression）"><a href="#立即执行函数（Immediately-Invoked-Function-Expression）" class="headerlink" title="立即执行函数（Immediately Invoked Function Expression）"></a>立即执行函数（Immediately Invoked Function Expression）</h3><p>在我们使用函数表达式来声明函数的时候，b指向的就是函数，我们要执行函数的时候就是b()。那么b的内容是什么 ？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">我们把b的内容打印出来b == function() &#123;</span><br><span class="line">                          console.log(&quot;b函数声明&quot;)</span><br><span class="line">                        &#125;</span><br><span class="line">我们是不是想到了，如果 function() &#123;</span><br><span class="line">                        console.log(&quot;b函数声明&quot;)</span><br><span class="line">                      &#125;() </span><br><span class="line">是不是也可以让函数得到执行，我们把这种执行叫做立即执行函数，不过此处有个坑。</span><br><span class="line">他会报错`token(`，因为function是个关键字，编译器在编译的时候，如果以function开头那么</span><br><span class="line">就应该以&#125;结尾，但是咱么以)结尾了，所以我们只需要不让function开头就好啦，我们可以</span><br><span class="line">给function前面放!/+/-或者用一个()把function() &#123;</span><br><span class="line">                                    console.log(&quot;b函数声明&quot;)</span><br><span class="line">                                  &#125;() </span><br><span class="line">整个包起来，或者只包裹函数声明的那一部分，不过用!/+ /-有可能改变函数的返回值，同时为了更</span><br><span class="line">符合函数的定义所以我们一般用()把函数声明的那一部分包起来，就变成了</span><br><span class="line">&#123;% codeblock lang:Javascript %&#125;</span><br><span class="line">(function f()&#123;</span><br><span class="line">  console.log(&quot;xxx&quot;)</span><br><span class="line">&#125;)()</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p><div class="note danger"><p>我们需要注意的是，小括号有多种语义，此时的语义是：强制表达式运算 ，被称作：分组操作符<br>他只能包含表达式，所以此时的小括号就把语句转成了函数表达式的声明方式，但是，我们如果把return，var等语句写进去就会报语法错误</p></div><hr><p>有关立即执行函数以及闭包等，等以后知识库充足了再写<br>IIFE（Immediately Invoked Function Expression），立即执行函数表达式<br>javascript中没用私有作用域的概念，如果在多人开发的项目上，你在全局或局部作用域中声明了一些变量，可能会被其他人不小心用同名的变量给覆盖掉，</p><p>根据javascript函数作用域链的特性，可以使用这种技术可以模仿一个私有作用域，用匿名函数作为一个“容器”，“容器”内部可以访问外部的变量，</p><p>而外部环境不能访问“容器”内部的变量，所以( function(){…} )()内部定义的变量不会和外部的变量发生冲突，俗称“匿名包裹器”或“命名空间”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现一个有意思的问题，有下面一段代码&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x + y)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;我们把它输入到firebug下的命令控制台里面，回车之后会输出什么？&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/categories/JavaScript/"/>
    
    
      <category term="js" scheme="https://fengmumu1.github.io/tags/js/"/>
    
      <category term="函数" scheme="https://fengmumu1.github.io/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算素数个数的三段进阶</title>
    <link href="https://fengmumu1.github.io/2018/07/04/count-primes-think/"/>
    <id>https://fengmumu1.github.io/2018/07/04/count-primes-think/</id>
    <published>2018-07-04T12:48:58.000Z</published>
    <updated>2018-07-04T15:57:22.587Z</updated>
    
    <content type="html"><![CDATA[<p>今天坐leetcode上的<a href="https://leetcode.com/problems/count-primes/description/" target="_blank" rel="noopener">Count Primes</a>这道题，题目要求比较的简单：Count the number of prime numbers less than a non-negative number, n. 就是给一个数字，然后输出从0到这个数字内有多少个素数。<br>老办法先实现后优化，实现之后发现优化真不容易，借助外界各种资源后，差不多算是达到了自己想达到的效果，故记录一下此次一波三折的优化。<br><a id="more"></a></p><h3 id="低阶版"><a href="#低阶版" class="headerlink" title="低阶版"></a>低阶版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimes</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>; j &lt;= <span class="built_in">Math</span>.sqrt(num); j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(num % j == <span class="number">0</span>)&#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> coun = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(isPrimes(i)) &#123;</span><br><span class="line">      coun++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> coun</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们可以看到函数逻辑比较简单，内层isPrimes函数为了提高速度，给除数加了一个小于等于Math.sqrt(num)的限制，之所以可以用这个数字来做限制是因为：num = a * b  当a增大的时候b一定减小，我们假设a从1一直增加，那么b将从num一直减小，当到a = Math.sqrt(num)的时候，a == b ，如果此时a继续增大呢，a是不是就向刚才一直减小的b一样了，也就是说我们相当于把之前做的运算又从新做了一遍，而这个计算是没有意义的，所以如果一个数除到他的开跟都不能整除，基本可以判定他是一个素数了。</p><h3 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> primesList = [] </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrimes</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; primesList[j] &lt;= <span class="built_in">Math</span>.sqrt(num); j++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(num % primesList[j] == <span class="number">0</span>)&#123; </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> coun = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(isPrimes(i)) &#123;</span><br><span class="line">      primesList.push(i) <span class="comment">//给数组添加质数，丰富质数表</span></span><br><span class="line">      coun++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> coun</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看一下上面的函数，上面函数的思路是这样的：一个数（大于1），他不是质数（素数）就是合数，合数可以分解成几个质数相乘，那么我是不是只要用这个数去除以质数我就知道他是不是一个合数了，那么问题来看了，一个数我们记作A，我们只需要依次他除以[2,√A]之间的质数就能判断出来他是不是一个合数了，这样子比我们从[2,√A]，一个一个除要快很多，好了现在问题来了，我们是不是需要一个[2,√A]之间的质数表，上面的程序是这样子构建这个质数表的，从2开始，一边判断一边添加，这样子后面的数字就可以用前面的质数表了（实际上一个质数的平方是远大于紧跟在在后面的那个质数的），我们现在回到程序（其实单步跟一下程序就能看出来啦）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(isPrimes(i)) &#123;</span><br><span class="line">  primesList.push(i) //给数组添加质数，丰富质数表</span><br><span class="line">  coun++</span><br><span class="line">&#125;1</span><br></pre></td></tr></table></figure></p><p>这个语句作用是，如果发现一个数是质数就给他放到质数表里，然后在记数结果+1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function isPrimes(num) &#123;</span><br><span class="line">  for(var j = 0; primesList[j] &lt;= Math.sqrt(num); j++) &#123;</span><br><span class="line">    if(num % primesList[j] == 0)&#123; </span><br><span class="line">      return false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个函数是判断函数啦，需要注意的是，第一次计算的时候<code>primesList[0] == undefine</code> ,<code>num % primesList[j]</code>的结果是NAN(我更喜欢叫他是无意义的计算)，然后NAN !== 0 （NAN连自己都相等） 这样子第一质数2，就成功的放入了数组啦<br>我们又成功地优化了函数，不禁要问这样子还可以优化吗？答案是：必须可以啊。</p><h4 id="进阶版小优化"><a href="#进阶版小优化" class="headerlink" title="进阶版小优化"></a>进阶版小优化</h4><p>我们给上面函数的 countPrimes 函数改一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> coun = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">3</span>; i &lt; n; i+=<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span>(isPrimes(i)) &#123;</span><br><span class="line">      primesList.push(i) <span class="comment">//给数组添加质数，丰富质数表</span></span><br><span class="line">      coun++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> coun</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>我们把<code>coun</code> 初始值改成1，变量<code>i</code>从3开始，每次都往里放奇数（偶数绝逼是合数），这样子速度又快了不少</p><h3 id="再进阶版"><a href="#再进阶版" class="headerlink" title="再进阶版"></a>再进阶版</h3><p>虽然上面的好理解，而且有了一定的优化，但是效率并不高，那么有没有效率更高的呢，答案是必须的，我们来看一下几千年前的一个算法：<a href="https://open.163.com/movie/2012/10/0/6/M99VJKUHC_M9ENDUB06.html" target="_blank" rel="noopener">埃拉托斯特尼筛法</a><br>其实 埃拉托斯特尼筛法 简单的说就是，把[2,A]之间的[2,√A]的数的所有倍数全部划去，最后留下的就是质数。<br>那么我们是不是可以这样子生成一个大小为n的数组，数组全部都为1，每发现一个合数，我们就把一个数组的元素变为0，最后我们只需要统计1的个数就好了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countPrimes</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//我们声明一个大小为n的数组，并且全部标记为1（我们把标记1是质数，0标记合数），</span></span><br><span class="line">  <span class="keyword">var</span> flags = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="number">1</span>)</span><br><span class="line">  <span class="comment">//其实这里的想法是 0 1 全不是质数，所以打掉，</span></span><br><span class="line">  flags[<span class="number">0</span>] = flags[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sn = <span class="built_in">Math</span>.sqrt(n)</span><br><span class="line">  <span class="comment">//我们只比对到[2,√A]的所有倍数</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= sn; i++) &#123;</span><br><span class="line">  <span class="comment">//注意在循环里面我们已经操作了flags，所以我们此时不需要再判断划掉了的元素（flags[i] == 0） </span></span><br><span class="line">    <span class="keyword">if</span> (flags[i]) &#123;</span><br><span class="line">      <span class="comment">//注意我们这个j，埃拉托斯特尼筛法 是从数字的倍数开始划的</span></span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> j = i * i; j &lt; n; j += i) &#123;</span><br><span class="line">        flags[j] = <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(flags[i]) &#123;</span><br><span class="line">      count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>现在我们又GET了一个新技能，我们再想一下是不是还可以优化一下，答案依然是是的，我们看一下他的进阶版</p><h3 id="再再进阶版"><a href="#再再进阶版" class="headerlink" title="再再进阶版"></a>再再进阶版</h3><p>如果你有心的话，你会发现我们上一个版本的函数，在划去合数的时候，会有重复划去的过程，这个我也就不上图了，自己单步走一下，或者在纸上画一下一切就会浮现出来的。<br>我们先上函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//小于3 就是 0 1 直接标记为0</span></span><br><span class="line"><span class="keyword">var</span> countPrimesx = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">//数组全部置1</span></span><br><span class="line">  <span class="keyword">var</span> f = <span class="keyword">new</span> <span class="built_in">Array</span>(n).fill(<span class="literal">true</span>)</span><br><span class="line"><span class="comment">//有一半的数字为偶数，所以直接打掉一半，然后后面的或是为了取整</span></span><br><span class="line">  <span class="keyword">var</span> count = n / <span class="number">2</span> | <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">3</span>; i * i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = i * i; j &lt; n; j += <span class="number">2</span>*i) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (f[j]) &#123;</span><br><span class="line">        --count</span><br><span class="line">        f[j] = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>文章末尾感谢那些愿意分享知识的人：<br>谢大喵<br><a href="https://blog.csdn.net/tel_annie/article/details/79744902" target="_blank" rel="noopener">TanX的博客</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天坐leetcode上的&lt;a href=&quot;https://leetcode.com/problems/count-primes/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Count Primes&lt;/a&gt;这道题，题目要求比较的简单：Count the number of prime numbers less than a non-negative number, n. 就是给一个数字，然后输出从0到这个数字内有多少个素数。&lt;br&gt;老办法先实现后优化，实现之后发现优化真不容易，借助外界各种资源后，差不多算是达到了自己想达到的效果，故记录一下此次一波三折的优化。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leet" scheme="https://fengmumu1.github.io/tags/leet/"/>
    
      <category term="素数" scheme="https://fengmumu1.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的递归以及浅谈尾调用</title>
    <link href="https://fengmumu1.github.io/2018/07/03/JavaScript-tail-Call/"/>
    <id>https://fengmumu1.github.io/2018/07/03/JavaScript-tail-Call/</id>
    <published>2018-07-03T13:52:59.000Z</published>
    <updated>2018-07-04T03:43:06.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一个递归引发的血案"><a href="#一个递归引发的血案" class="headerlink" title="一个递归引发的血案"></a>一个递归引发的血案</h3><h4 id="案发现场"><a href="#案发现场" class="headerlink" title="案发现场"></a>案发现场</h4><p>今天看到了递归，测试的时候必须是经典的  <a href="https://www.baidu.com/link?url=K3gRN6fMUN_l6_8f7UiOQoRhsa5v0LEQzjwKOJkpuNiywF3ivK9ELpd2KW-A8KCn888Ekr6Xv70ZjRguMF5Gn7fhzOfVyMUleJaW5QC-zdJIINMXZGP-Nx945Pox-L_JYVUX5_adWxCpUDqVOEgu5_&amp;wd=&amp;eqid=ccb3c7a0000077f8000000045b3b813f" target="_blank" rel="noopener">Fibonacci （斐波纳契） 数列</a>,然后我做的时候的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( n &lt;= <span class="number">1</span> ) &#123;<span class="keyword">return</span> <span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这是一个很简答的递归函数，单纯且不做作。他很简单，看一眼就知道他是如何运算的，单纯到到计算一个Fibonacci(100)就给我来个栈溢出错误(stack overflow)，然后我很奇葩的算了一下Fibonacci(25)，然后就卡-住-了，这不行啊，所以我就去搜原因去咯。<br><a id="more"></a></p><h4 id="抢救现场"><a href="#抢救现场" class="headerlink" title="抢救现场"></a>抢救现场</h4><p>找了一下，找了一个有优化效果的函数：<br><figure class="highlight javascript"><figcaption><span>尾递归优化后的程序</span><a href="http://phpstudy.php.cn/c.php/107851.html" target="_blank" rel="noopener">源程序连接</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibArr =[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>  fibArr[n]? fibArr[n]:(fibArr[n]=Fibonacci(n<span class="number">-1</span>)+Fibonacci(n<span class="number">-2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="案件复盘"><a href="#案件复盘" class="headerlink" title="案件复盘"></a>案件复盘</h4><p>嗯，解释这个程序的思想之前我们先来看一下我们以前的程序都干了什么，在这之前我们先来补充一个小知识点：<br><blockquote><p>我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。</p><footer><strong>@阮一峰</strong><cite><a href="http://es6.ruanyifeng.com/?search=%E9%80%92%E5%BD%92&x=0&y=0#docs/function" target="_blank" rel="noopener">es6.ruanyifeng.com/?search=%E9%80%92%E5%BD%92&x=0&y=0#docs/function</a></cite></footer></blockquote><br><blockquote class="blockquote-center"><p>通过上面我们知道了，要是每次调用都会在内存生成一个调用帧，然后我们看一下Fibonacci数列，我们单步进入程序的时候（或者在纸上画一下）可以发现，我们一开始的程序在计算的时候会压入很多重复的计算，也就是说很多调用帧的返回结果是相同的，但是我们还是把他们压入到了调用栈里面，（函数先计算+左边的，然后就不断的进入函数内部，不断的压栈，计算完成后再一层一层的往回出栈，等到+左边的计算完了，再来右边的，你会发现右边的很多调用帧的结果刚才都算出来了，可是在算+左边结果的时候又把它们清除了，这样子是不是浪费了大把的时间）这样一来就是两个结果，栈不够用爆掉啦，栈将将够用，然后程序慢慢进再慢慢的出，这时候好的电脑运行会变慢，差的电脑就会卡住或者死机，让我哭一会。</p></blockquote></p><h3 id="引入尾调用"><a href="#引入尾调用" class="headerlink" title="引入尾调用"></a>引入尾调用</h3><p>我哭好了，我们继续看优化后的函数，优化后的函数优化就是优化了重复的那个一部分，我们用数组来存储+左边我们每一个调用帧计算的结果，到计算+右边的时候我们直接和数组里面的数字（注意那个n）进行比对,准确的说是看参数是否相同，相同的话就直接出返回结果而不进栈了。<br>这里其实用到了一点缓存区的概念（这个我们有空再聊哈），我们这样子优化的直接效果就是进去的调用帧少了，直接结果是栈不会爆了，也没有了多余的重复计算，速度直接就上去了。<br>那么问题来了，是不是递归都会有这个问题，答案是：一些形式的递归是的，这个由JavaScript的栈机制造成的。<br>是不是要说，一些形式是的，那不就是还有形式不是，好了，我要开始装逼了，那个形式就是：尾调用。<br>直接上阮一峰大佬的解释：<br><blockquote><p>尾调用（Tail Call）是函数式编程的一个重要概念，本身非常简单，一句话就能说清楚，就是指某个函数的最后一步是调用另一个函数。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，函数f的最后一步是调用函数g，这就叫尾调用。<br>以下三种情况，都不属于尾调用。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> y = g(x);</span><br><span class="line">  <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，情况一是调用函数g之后，还有赋值操作，所以不属于尾调用，即使语义完全一样。情况二也属于调用后还有操作，即使写在一行内。情况三等同于下面的代码。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">  g(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>尾调用不一定出现在函数尾部，只要是最后一步操作即可。</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> m(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上面代码中，函数m和n都属于尾调用，因为它们都是函数f的最后一步操作。</p><footer><strong>@阮一峰</strong><cite><a href="http://es6.ruanyifeng.com/?search=%E9%80%92%E5%BD%92&x=0&y=0#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">es6.ruanyifeng.com/?search=%E9%80%92%E5%BD%92&x=0&y=0#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96</a></cite></footer></blockquote></p><h3 id="关于尾调用的优化"><a href="#关于尾调用的优化" class="headerlink" title="关于尾调用的优化"></a>关于尾调用的优化</h3><p>好了现在知道了尾调用，按道理我应该引入尾调用的优化，毕竟ES6第一次明确规定，所有 ECMAScript 的实现，都必须部署“尾调用优化”。这就是说，ES6 中只要使用尾递归，就不会发生栈溢出，相对节省内存。<br>也就是说，尾调用是一写法形式，写成这样子，浏览器会自动进行优化（不过目前只有苹果的才支持，其它的浏览器需要在严格模式下才执行这个操作），又或者我们可以写一个函数，自己来做这个尾调用优化，但是我依稀还记得 Eloquent_JavaScript（第二版） 中有一句话：<br><blockquote><p>The dilemma of speed versus elegance is an interesting one. You can see it as a kind of continuum between human-friendliness and machinefriendliness. Almost any program can be made faster by making it bigger and more convoluted. The programmer must decide on an appropriate balance.</p><footer><strong>Marijn Haverbeke</strong><cite>Eloquent_JavaScript</cite></footer></blockquote><br>其实自己进行优化的方式也只是把递归转化成循环的样子，有的人会坚持尽可能的用循环而不是用递归，应为为达到同样的效果用循环更快，其实二者那个好都说不好的，或许等到浏览器都支持在正常模式下也进行尾递归优化的时候，递归就用的越来越多了，毕竟他有其独到的优势哈。</p><h3 id="递归函数的规则"><a href="#递归函数的规则" class="headerlink" title="递归函数的规则"></a>递归函数的规则</h3><p>最后附上一个写递归函数的规则：<br><blockquote><p>当编写递归例程的时候，关键是要牢记递归的四条基本法则:</p><ol><li>基准情形。必须总有某些基准情形，它无须递归就能解出。</li><li>不断推进。对于那些需要递归求解的情形嗯每一次递归调用都必须要使求解状况朝接近基准情形的方向推进。</li><li>设计法则。假设所有的递归调用都能运行。</li><li>合成效益法则(ωmpound interest rule ) 。在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作。</li></ol><footer><strong>Mark Allen Weiss·著 冯舜玺·译</strong><cite>数据结构与算法分析：C语言描述（第2版）</cite></footer></blockquote></p><p>以下是本博文参考的资料，感谢他们的分享</p><hr><p>数据结构与算法分析：C语言描述（第2版）<br>阮一峰大佬的：<a href="http://es6.ruanyifeng.com/?search=%E9%80%92%E5%BD%92&amp;x=0&amp;y=0#docs/function#%E5%B0%BE%E8%B0%83%E7%94%A8%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">ECMAScript 6入门</a><br><a href="http://phpstudy.php.cn/c.php/107851.html" target="_blank" rel="noopener">phpstudy的文章</a><br><a href="https://blog.csdn.net/jxgz_leo/article/details/53208524" target="_blank" rel="noopener">jxgz_leo的博客</a>。关于尾数调用优化，这个博文写的比阮大佬能详细</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一个递归引发的血案&quot;&gt;&lt;a href=&quot;#一个递归引发的血案&quot; class=&quot;headerlink&quot; title=&quot;一个递归引发的血案&quot;&gt;&lt;/a&gt;一个递归引发的血案&lt;/h3&gt;&lt;h4 id=&quot;案发现场&quot;&gt;&lt;a href=&quot;#案发现场&quot; class=&quot;headerlink&quot; title=&quot;案发现场&quot;&gt;&lt;/a&gt;案发现场&lt;/h4&gt;&lt;p&gt;今天看到了递归，测试的时候必须是经典的  &lt;a href=&quot;https://www.baidu.com/link?url=K3gRN6fMUN_l6_8f7UiOQoRhsa5v0LEQzjwKOJkpuNiywF3ivK9ELpd2KW-A8KCn888Ekr6Xv70ZjRguMF5Gn7fhzOfVyMUleJaW5QC-zdJIINMXZGP-Nx945Pox-L_JYVUX5_adWxCpUDqVOEgu5_&amp;amp;wd=&amp;amp;eqid=ccb3c7a0000077f8000000045b3b813f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fibonacci （斐波纳契） 数列&lt;/a&gt;,然后我做的时候的代码如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Fibonacci&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ( n &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ) &amp;#123;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Fibonacci(n - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) + Fibonacci(n - &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这是一个很简答的递归函数，单纯且不做作。他很简单，看一眼就知道他是如何运算的，单纯到到计算一个Fibonacci(100)就给我来个栈溢出错误(stack overflow)，然后我很奇葩的算了一下Fibonacci(25)，然后就卡-住-了，这不行啊，所以我就去搜原因去咯。&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/tags/JavaScript/"/>
    
      <category term="递归" scheme="https://fengmumu1.github.io/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="栈" scheme="https://fengmumu1.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>发现个异或的妙用</title>
    <link href="https://fengmumu1.github.io/2018/07/02/Single-Number/"/>
    <id>https://fengmumu1.github.io/2018/07/02/Single-Number/</id>
    <published>2018-07-02T13:35:45.000Z</published>
    <updated>2018-07-03T01:32:41.439Z</updated>
    
    <content type="html"><![CDATA[<p>有个题目是这样子的：<a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="noopener">Single Number</a><br>题目要求如下：Given a non-empty array of integers, every element appears twice except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br>意思就是一个数组[2，2，3，3，5] 5就是那个 single numble了<br>然后自己想了半天也就会笨办法，倒也能通过，然后看了一下前面人的解法,又一次打开了脑洞<br><a id="more"></a><br>大佬的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums || nums.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res ^= nums[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>一开始我还没有看懂为什么异或就可以，不就是相同为0，不同为1啊，然后单步进去运行了一下，还是一头雾水（单步的时候res没有规律），出去上个厕所，喝口水。然后突然想到，从把数组所有的数字全拿出来，一个一个异或，可以看成相同的和相同的异或，然后得到的是0 ，最后剩下一个奇数的single number，把他和0异或（^）就得到他本身啊。</p><div class="note info"><p>多动动，多喝水，没事上个厕所，买个小黄鸭，换个角度，问题就迎刃而解啊啊啊啊啊啊！！！！</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有个题目是这样子的：&lt;a href=&quot;https://leetcode.com/problems/single-number/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Single Number&lt;/a&gt;&lt;br&gt;题目要求如下：Given a non-empty array of integers, every element appears twice except for one. Find that single one.&lt;br&gt;Note:&lt;br&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;br&gt;意思就是一个数组[2，2，3，3，5] 5就是那个 single numble了&lt;br&gt;然后自己想了半天也就会笨办法，倒也能通过，然后看了一下前面人的解法,又一次打开了脑洞&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
      <category term="思路" scheme="https://fengmumu1.github.io/tags/%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>从Power_of_Two所得</title>
    <link href="https://fengmumu1.github.io/2018/07/02/leetode-Power-of-Two-think/"/>
    <id>https://fengmumu1.github.io/2018/07/02/leetode-Power-of-Two-think/</id>
    <published>2018-07-02T07:21:40.000Z</published>
    <updated>2018-07-02T08:22:31.606Z</updated>
    
    <content type="html"><![CDATA[<p>开始刷leetcode上的题目了，毕竟写程序也是需要开脑洞的，刷题目就能让自己脑洞越来越大的说，这不发现了一个题目： <a href="https://leetcode.com/problems/power-of-two/description/" target="_blank" rel="noopener">Power of Two</a><br>题目要求：<br>Given an integer, write a function to determine if it is a power of two.<br>其实就是让你看一个数是不是2的幂次方<br><a id="more"></a></p><hr><p>先说我的思路吧，一个数一直除以2，除到他小于4的时候，2的幂方数就是只有 2  1 这两个数字了，那么我判断一下是不是他俩就好啦<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPowerOfTwo = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> wx = n</span><br><span class="line">  <span class="keyword">var</span> falg = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (falg == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// wx = wx &gt;&gt; 1</span></span><br><span class="line">    wx = wx / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (wx &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="comment">//需要考虑一开始就是1的情况</span></span><br><span class="line">      <span class="keyword">if</span> (wx == <span class="number">2</span> || wx == <span class="number">1</span> || wx == <span class="number">0.5</span>) &#123;</span><br><span class="line">        falg = <span class="number">1</span></span><br><span class="line">        <span class="comment">// console.log("true")</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        falg = <span class="number">2</span></span><br><span class="line">        <span class="comment">// console.log("false")</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><p>然后看了看别人的代码，发现了一个很棒的思路，思路就是看 n 与 n-1 与出来的结果是不是 0<br>我们看一下  4 二进制是：0100 那么3呢，3是 0011，二者与出来就是0，所以这个思路太赞了，一下子就得出结果了。代码是没有的，思路都有了，代码还写不出来吗！</p><hr><p>又发现了个看数字是不是4的幂的题<br>我的想法是 先看他是不是2的幂，再看他是不是小于10，小于的话，等不等于 4 或者 8<br>然后发现了一个想法是，先看是不是2 的幂，然后看能不能整除4<br>然后又发现了个是不是3的幂的数，我的思路是利用数学规则（各个位相加为三的倍数）看他是不是能被3整除，能的话就除以3，用结果继续这样子判断，一直到他小于10的时候，看是不是 3 或者 9<br>结果发现了一个更惊为天人的思路，思路是这样子的，把可以取值范围内的最大3的幂数求出来，记为 a , 然后给个数字b 如果 a % b === 0那b就是3的幂数，没有想到的话看下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 3 * 3 * 3 * 3 * 3 *3 *3   </span><br><span class="line">b = 3 * 3 * 3 </span><br><span class="line">c = 3 * 3 * 4</span><br></pre></td></tr></table></figure></p><p>这个就很直观了吧！</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始刷leetcode上的题目了，毕竟写程序也是需要开脑洞的，刷题目就能让自己脑洞越来越大的说，这不发现了一个题目： &lt;a href=&quot;https://leetcode.com/problems/power-of-two/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Power of Two&lt;/a&gt;&lt;br&gt;题目要求：&lt;br&gt;Given an integer, write a function to determine if it is a power of two.&lt;br&gt;其实就是让你看一个数是不是2的幂次方&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
      <category term="思路" scheme="https://fengmumu1.github.io/tags/%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>给文章加入版权信息</title>
    <link href="https://fengmumu1.github.io/2018/07/02/tip-copyright/"/>
    <id>https://fengmumu1.github.io/2018/07/02/tip-copyright/</id>
    <published>2018-07-02T02:22:30.000Z</published>
    <updated>2018-07-03T01:30:27.442Z</updated>
    
    <content type="html"><![CDATA[<p>看到别人的的博客下面都有版权信息（就是本文最底下的那个啦），然后自己也想加上一个，搜了一下都是17年的老文章，用的是自定义的方法。<br>本来打算去DIY一下，然后突发奇想去主题插件搜了一下版权（copyright），然后发现了这个东西<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: false</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>就把那个<code>enable: false</code> 改成<code>enable: true</code> 就好啦<br><code>`</code></p><hr><p>ps:如果底下的版权信息中的本文链接：成了<code>http://yoursite.com/2018/07/02/tip-copyright</code>这个样子<br>只需要在网站配置文件下把url: <a href="http://yoursite.com" target="_blank" rel="noopener">http://yoursite.com</a> 改成url: <a href="https://fengmumu1.github.io">https://fengmumu1.github.io</a> 就好啦</p><p>有一篇博文还可以，就是关于next配置的，不过文章写的时间有点老，方法都还是有效果的，不过新的next版本会有更好的实现方式，所以不要以为的抄啦。 <a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">文章传送门</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到别人的的博客下面都有版权信息（就是本文最底下的那个啦），然后自己也想加上一个，搜了一下都是17年的老文章，用的是自定义的方法。&lt;br&gt;本来打算去DIY一下，然后突发奇想去主题插件搜了一下版权（copyright），然后发现了这个东西&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://fengmumu1.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://fengmumu1.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的数字存储</title>
    <link href="https://fengmumu1.github.io/2018/06/30/js-number/"/>
    <id>https://fengmumu1.github.io/2018/06/30/js-number/</id>
    <published>2018-06-30T08:07:05.000Z</published>
    <updated>2018-07-02T02:14:08.429Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中数字是不区分整数值与浮点数值的，在JavaScript中所有的数均使用64位的浮点格式来存储以及表示（IEEE 754标准）。所以数值最大是：±1.7976931348623157 X 10^308最小是±5X10^-324，可以表示的整数范围是-9 007 199 254 740 992~9 007 199 254 740 992 （对应的是-2^53~2^53）包含边界值。<br><div class="note danger"><p>注意：在对JS中的数值进行位操作的时候会自动把64位转化为32进行操作（由于运算符的自身限制，其只能对32位进行操作），在对小数进行位操作 比如左移零位，小数会丢弃小数部分转化成整数 </p></div><br><a id="more"></a></p><h3 id="JavaScript中数字不一定很准确"><a href="#JavaScript中数字不一定很准确" class="headerlink" title="JavaScript中数字不一定很准确"></a>JavaScript中数字不一定很准确</h3><p>首先我们先看一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line">x = <span class="number">.3</span> - <span class="number">.2</span></span><br><span class="line">y = <span class="number">.2</span> - <span class="number">.1</span></span><br><span class="line"><span class="built_in">console</span>.log(x == <span class="number">.1</span> )</span><br><span class="line"><span class="built_in">console</span>.log(y == <span class="number">.1</span> )</span><br></pre></td></tr></table></figure><br>运行结果是 false 和 true<br>讲道理的说0.3 - 0.2 = 0.1;0.2-0.1 = 0.1 这个是正确的，那么为什么到了JS的代码里就不正确了，解决这个问题，我们首先要看一下JS的数字是如何存储的。</p><h3 id="JS数字的存储"><a href="#JS数字的存储" class="headerlink" title="JS数字的存储"></a>JS数字的存储</h3><p>在本文的前言中我们说到了JS用的是IEEE754标准，这个标准规定了浮点数的表示方法（此方法也是目前通用计算机所才用的浮点数存数方式）。在此标准中浮点数有float和double两种存储形式，但由于JS是一种弱类型编程语言他的数字采用了double类型存储，也就是我们常说的使用64位来存储数字的双精度型。那么我们是如何利用这64位来存储数据的呢？    我们都知道科学计数法，即把一个数比如123465.555可以写成1.23456555<em>10^5，这样子不仅读写方便也能减少存数该数字的空间，123456.555是一个十进制的数字，那么我们是把一个二进制的数字是否也可以转化成这个形式，以达到减少存数空间的目的，答案是肯定的。我们把一个十进制数比如：<strong>3.25</strong> 写成二进制的形式：<strong>11001.01</strong>，类比十进制的写法，我们可以把他写成 **1.100101\</em>2^4<strong>，现在我们看一下这个数字，他由有效数字 </strong>1.100101<strong> 以及指数 </strong>2^4** 以及我们省略了的符号位组成（正数的符号位是 + 负数的是- 零的话严格来说不属于正负，计算机如何处理他我们后文将解释），那么64位的空间我们就知道需要放三大块的东西了：有效数字、指数、符号位</p><ul><li>sign bit(符号）：我们在64位的最高位放置符号位，最高位为1，表示数字是正数还是负数</li><li>exponent(指数):我们在从左往右再取11位用来表示指数</li><li>mantissa(尾数):我们把剩余的52位空间全部用来存储有效数字 <img src="/2018/06/30/js-number/64w.jpg" title="64位存储示意图"><div class="note primary"><p>1.为了最大限度的利用存储有效数字的52位，我们把小数点以及小数点前的那一个数字给省略掉（正确的化简后尾数会被处理到大于等于1而小于2的区间内，这时候便可省去前导的“1”），所以我们只需要存贮小数点后面的 <strong>100101</strong>就可以了<br>2.在上图中存储指数的数值叫做阶码，有它转换出来的阶码的数值等于指数的数值，阶码=指数+1023 (科学计数法中的指数是可以为负数的，所以约定减去一个中间数 1023，[0,1022] 表示为负，[1024,2047] 表示为正)。在 ECMAScript 规范里有给出指数的范围： [-1074, 971] 。</p></div><h3 id="为什么会出现数字不准确"><a href="#为什么会出现数字不准确" class="headerlink" title="为什么会出现数字不准确"></a>为什么会出现数字不准确</h3>现在我们知道了一个数是如何存储的，那么我们来想一个问题，1.3转化为二进制是多少<code>0.010011001100....1100</code>，对的你发现了他的小数部分除不尽，那么意味着他的小数部分用64位表示不完。我们来看一下浏览器是如何处理的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1.3</span> </span><br><span class="line"><span class="built_in">console</span>.log(a.toString(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>输出的结果是 <strong>1.010011001100110011001100110011001100110011001100110011</strong><br>我们来比较一下浏览器计算的1.3和我们手算的1.3的差别<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器： 1.0100110011001100110011001100110011001100110011001101</span><br><span class="line">手 算 ： 1.0100110011001100110011001100110011001100110011001100*1100*</span><br></pre></td></tr></table></figure></li></ul><p>我们看到浏览器进行了进位操作，浏览器执行的是满1进位，不满则省略的方案<br>所以这也就是为什么我们在进行浮点数运算的时候有时候得不到精确的数值的原因所在了。</p><h3 id="为什么-0-3-0-3"><a href="#为什么-0-3-0-3" class="headerlink" title="为什么 0.3 == 0.3"></a>为什么 0.3 == 0.3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0.3</span></span><br><span class="line"><span class="built_in">console</span>.log( x === <span class="number">0.3</span> )</span><br></pre></td></tr></table></figure><p>它的运行结果是true<br>前面不是说使用浮点数存储，小数部分出现循环后，系统存的不是一个准确数值，那么这里为什么会是true呢？<br>因为 尾数(mantissa) 固定长度是 52 位，再加上省略的一位，最多可以表示的数是 2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度（也就是说按照52个尾数全为0到其全为1，让其对应以十进制表示的从1到9007199254740992[注意我们省略了小数点前面的一位，所以计算的时候应该按照53位计算]）。它的长度是 16，所以可以近似使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理。于是就有 x.toPrecision(16) === 0.3<br><div class="note primary"><p>toPrecision(16) 是先把二进制保存的不精确的那个数，转化为十进制数。然后是对十进制的数字再去保留小数点后的16位</p></div></p><h3 id="大数危机"><a href="#大数危机" class="headerlink" title="大数危机"></a>大数危机</h3><p>如果有数字处于2^53到2^63之间呢，他们是是如何取舍的</p><ul><li>(2^53, 2^54) 之间的数会两个选一个，只能精确表示偶数</li><li>(2^54, 2^55) 之间的数会四个选一个，只能精确表示4个倍数… </li><li>依次跳过更多2的倍数<br>我们来看一张图（图是我偷得）<img src="/2018/06/30/js-number/da.jpg" title="实数与浮点数的对应">我们可以看到在中间的部分，实数与浮点数还可以近似的一一对应，越往两边用浮点数与实数对应关系就越差，也就是说精度就逐渐的丢失</li></ul><blockquote><p>要想解决大数的问题你可以引用第三方库<a href="https://github.com/MikeMcl/bignumber.js/" target="_blank" rel="noopener">bignumber.js</a>，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生的差很多，所以原生支持大数就很有必要了。TC39 已经有一个 Stage 3 的提案<a href="https://github.com/tc39/proposal-bigint" target="_blank" rel="noopener">proposal bigint</a>，大数问题有望彻底解决。在浏览器正式支持前，可以使用<a href="https://github.com/peterolson/BigInteger.js" target="_blank" rel="noopener">Babel 7.0</a> 来实现，它的内部是自动转换成 big-integer 来计算，这样能保持精度但运算效率会降低。</p><footer><strong>@camsong</strong><cite><a href="https://zhuanlan.zhihu.com/p/30703042" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/30703042</a></cite></footer></blockquote><p>toPrecision 和 toFixed</p><ul><li>toPrecision 是处理精度，精度是从左至右第一个不为0的数开始数起。</li><li>toFixed 是小数点后指定位数取整，从小数点开始数起。<br>两者都能对多余数字做凑整处理，也有些人用 toFixed 来做四舍五入，但注意它是有坑的。<br>比如1.055.toFixed(2) = 1.05 问题是他的第三位明明是5啊，说好的四舍五入呢？<br>因为1.055实际对应的数字是1.0499999999 所以就出现前面的结果啦<blockquote><p>当你拿到 1.4000000000000001 这样的数据要展示时，建议使用 toPrecision 凑整并 parseFloat 转成数字后再显示。<br>对于运算类操作，如 +-*/，就不能使用 toPrecision 了。正确的做法是把小数转成整数后再运算。<br>ps:</p><ul><li>1.以上内容是原文章的删减内容，需要看原文章内容，下面有链接</li><li>2.toPrecision 取一个经验数值 12 即可</li><li>3.原文推荐了一个js处理浮点数的类库，大小只有1K，传送门: <a href="https://github.com/nefe/number-precision" target="_blank" rel="noopener">number-precision</a></li></ul><footer><strong>@camsong</strong><cite><a href="https://zhuanlan.zhihu.com/p/30703042" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/30703042</a></cite></footer></blockquote>现在我们继续看这样一行代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9999999999999999 == 10000000000000000</span><br></pre></td></tr></table></figure></li></ul><p>结果是true，这个又是为什么呢？<br>我们在前面说到e的范围是 [-1074, 971] ，也就是说他能保存的最大的数字是<br>1 x (2^53 - 1) x 2^971 = 1.7976931348623157e+308<br><div class="note primary"><ol><li>52个1就等于 2^53 - 1</li><li>注意结果要补上我们省略的那个1.</li></ol></div><br>类似的整数部分最小的是：1 x 1 x 2^(-1074) = 5e-324<br>由此我们可以知道：<br>Number.MAX_VALUE 以及 Number.MIN_VALUE 的两个数值了<br><div class="note danger"><p>注意：Number.MIN_VALUE 只是正数中最小的数字，实数最小的数字是 -Number.MAX_VALUE</p></div></p><p>现在结合前面所有的知识回过头来看一下，js中最大的数字是 Number.MAX_VALUE ，他是尾数为 2^53 指数为971 时候的数字<br>那么 如果有个数值他转成二进制的科学计数法之后，尾数大于2^53次方呢，这时候由于计算机会有一定的取舍（前文已经说过，具体的取舍方法有四条，有兴趣的可以自行维基解密），所以他的存储就有了误差。<br>所以经过了取舍的两个大数就相同了，</p><div class="note danger"><p>注意：其实现在我们可以发现在浮点数的时候虽然最大是 Number.MAX_VALUE，但是他有可能是其他的数值取舍得来，所以小于2^53的数值才是可以正确表示的数值，所以就有了 Number.MAX_SAFE_INTEGE 这个数值，其表示js中的安全数值</p></div><h3 id="最后八卦几个数值"><a href="#最后八卦几个数值" class="headerlink" title="最后八卦几个数值"></a>最后八卦几个数值</h3><blockquote><p>9007199254740990 (that is, 2^53-2) distinct “Not-a-Number” values of the IEEE Standard are represented in ECMAScript as a single special NaN value. (Note that the NaN value is produced by the program expression NaN.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all NaN values are indistinguishable from each other.</p><footer><strong>@ECMAScript 规范</strong><cite><a href="http://es5.github.io/#x8.5" target="_blank" rel="noopener">es5.github.io/#x8.5</a></cite></footer></blockquote><p>NAN = 9007199254740990 == 2^53−2  需要注意,NAN只是数值上是这个，但实际上他是有程序生成的所以所以NAN不等于NANHA</p><p>关于无穷大有个有意思的东西<br>首先抛出大佬给的问题（原始博文在最底部）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Number.MAX_VALUE + 1 == Number.MAX_VALUE;</span><br><span class="line">Number.MAX_VALUE + 2 == Number.MAX_VALUE;</span><br><span class="line">...</span><br><span class="line">Number.MAX_VALUE + x == Number.MAX_VALUE;</span><br><span class="line">Number.MAX_VALUE + x + 1 == Infinity;</span><br><span class="line">...</span><br><span class="line">Number.MAX_VALUE + Number.MAX_VALUE == Infinity;</span><br><span class="line"> </span><br><span class="line">// 问题：</span><br><span class="line">// 1. x 的值是什么？</span><br><span class="line">// 2. Infinity - Number.MAX_VALUE == x + 1; 是 true 还是 false ?</span><br></pre></td></tr></table></figure></p><p>放出原博主的解答：<br><blockquote><p>我的想法是这样的：</p><p>Number.MAX_VALUE.toString(16) = ”<br>fffffffffffff800000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000″</p><p>前面有 13 个 f, 二进制就是 52 个 1<br>还有一个 8, 二进制是 1000<br>也就是说，前面 53 位都是 1</p><p>这样，当 Number.MAX_VALUE + 1 时，1 替代最后一个 0，但 IEEE 754 双精度浮点数的 m 最大为 53（含隐藏位），因此添加的 1 在存储时会被舍弃掉，所以：</p><p>Number.MAX_VALUE + 1 == Number.MAX_VALUE</p><p>同理类推，当 8（1000） 变成 b（1011），b 后面的位取最大值时，依旧有：</p><p>0xfffffffffffffbfffffffffffffffffffffffffffffffffffff<br>fffffffffffffffffffffffffffffffffffffffffffffffffffffff<br>fffffffffffffffffffffffffffffffffffffffffffffffffffffff<br>fffffffffffffffffffffffffffffffffffffffffffffffffffffff<br>ffffffffffffffffffffffffffffffffffffffff == Number.MAX_VALUE</p><p>进一步，当 再增 1, b 变成 c 时，将发生质变：</p><p>0xfffffffffffffc00000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000 == Infinity</p><p>这是因为前面将有 54 个连续的 1, 在存储时，exponent 将由<br>971 变成 972, 超出了 IEEE 754 双精度浮点数存储格式中 e 的<br>最大值，因此质变为 Infinity 了。</p><p>这样，题目中 x 的值就很容易得到了：</p><p>x = 0xfffffffffffffbffff… – 0xfffffffffffff80000…<br>= 0x00000000000003ffff…</p><p>注意这个数在IEEE 754 双精度浮点数格式下无法精确存储。</p><p>还能得到两个有趣的结论：</p><ol><li>Number.MAX_VALUE 不是一个数，而是一个区间 [0xfffffffffffff80000…, 0xfffffffffffffc0000…)</li><li>Infinity 指的是，所有大于等于 0xfffffffffffffc0000… 的数。</li></ol><footer><strong>@lifesinger</strong><cite><a href="https://lifesinger.wordpress.com/2011/03/07/js-precision/" target="_blank" rel="noopener">lifesinger.wordpress.com/2011/03/07/js-precision</a></cite></footer></blockquote></p><hr><p>更新一个知识点： Number.EPSILON 是一个整数，然后与这个整数大的第一个数的差值<br>也就是说如果两个数的差值小于  Number.EPSILON  这两个数就是一个数</p><hr><p>参考文档</p><hr><ol><li>谢大喵的上课视频</li><li>知乎：抓住数据的小尾巴 - JS浮点数陷阱及解法     <a href="https://zhuanlan.zhihu.com/p/30703042" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30703042</a></li><li>lifesinger的博客  <a href="https://lifesinger.wordpress.com/2011/03/07/js-precision/" target="_blank" rel="noopener">https://lifesinger.wordpress.com/2011/03/07/js-precision/</a></li><li>ECMAScript 规范 <a href="http://es5.github.io/#x8.5" target="_blank" rel="noopener">http://es5.github.io/#x8.5</a></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中数字是不区分整数值与浮点数值的，在JavaScript中所有的数均使用64位的浮点格式来存储以及表示（IEEE 754标准）。所以数值最大是：±1.7976931348623157 X 10^308最小是±5X10^-324，可以表示的整数范围是-9 007 199 254 740 992~9 007 199 254 740 992 （对应的是-2^53~2^53）包含边界值。&lt;br&gt;&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;注意：在对JS中的数值进行位操作的时候会自动把64位转化为32进行操作（由于运算符的自身限制，其只能对32位进行操作），在对小数进行位操作 比如左移零位，小数会丢弃小数部分转化成整数 &lt;/p&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/tags/JavaScript/"/>
    
      <category term="数字" scheme="https://fengmumu1.github.io/tags/%E6%95%B0%E5%AD%97/"/>
    
      <category term="存储" scheme="https://fengmumu1.github.io/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo下的markdown语法</title>
    <link href="https://fengmumu1.github.io/2018/06/29/hexo-markdown-grammar/"/>
    <id>https://fengmumu1.github.io/2018/06/29/hexo-markdown-grammar/</id>
    <published>2018-06-29T12:53:40.000Z</published>
    <updated>2018-07-08T08:34:44.840Z</updated>
    
    <content type="html"><![CDATA[<p>入坑了一个新的主题-next,发现他有一些markdown的语法比较特殊，所以整理了一下相关的信息。<br><a id="more"></a></p><h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="文章头部的-front-matter"><a href="#文章头部的-front-matter" class="headerlink" title="文章头部的 front-matter"></a>文章头部的 <code>front-matter</code></h2><p>目前我用的主题是<a href="https://github.com/iissnan/hexo-theme-next/releases" title="netx下载地址" target="_blank" rel="noopener">next</a>，版本是：v5.1.4 ,hexo的版本是3.7.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hexo下的markdown语法</span><br><span class="line">date: 2018-06-29 20:53:40</span><br><span class="line">tags: </span><br><span class="line">  - hexo</span><br><span class="line">  - markdown语法</span><br><span class="line">categories: hexo</span><br></pre></td></tr></table></figure></p><p>以前的tages的写法是 <code>tags: [aa,bb,cc]</code> ，现在我发现tages的写法是：隔行然后缩进前面加中划线，<strong>再加上一个空格</strong>，然后写上标签。<br><div class="note danger"><p>注意：tags 与后面的标签内容必须要有一个空格，在hexo中的很多地方都有这个要求</p></div></p><h2 id="文章相关的语法"><a href="#文章相关的语法" class="headerlink" title="文章相关的语法"></a>文章相关的语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=====  (等于号)是一级标题</span><br><span class="line">------ （减号）是二级标题</span><br><span class="line">###    是三级标题</span><br></pre></td></tr></table></figure><p>或者使用传统的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#         H1</span><br><span class="line">##        H2</span><br><span class="line">###       H3</span><br><span class="line">...</span><br><span class="line">######    H6</span><br></pre></td></tr></table></figure></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>单独一行使用<code>***</code>或者<code>——————（下划线）</code></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用<code>~~需要删除的文字~~</code>来表示，<del>这个要被删除</del><br><div class="note danger"><p>注意：前后~~与文字没有空格</p></div></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接的文字](链接的地址 &quot;鼠标指上后链接显示的文字&quot;)</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用<code>\</code>来注释，类似于转义字符的效果</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 打工是不可能打工的，这辈子都不可能打工的 </span><br></pre></td></tr></table></figure><div class="note danger"><p>注意：如果仅在第一行使用 &gt;， 后面相邻的行即使省略 &gt;，也会变成引用内容，可以在结束的语句后面加上两个空格，或者与后面的语句直接空一行</p></div><p><strong>验证写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 打工是不可能打工的，这辈子都不可能打工的</span><br><span class="line">打工是不可能打工的，这辈子都不可能打工的 </span><br><span class="line">打工是不可能打工的，这辈子都不可能打工的 </span><br><span class="line"></span><br><span class="line">打工是不可能打工的，这辈子都不可能打工的 </span><br></pre></td></tr></table></figure><br><strong>效果</strong></p><blockquote><p>打工是不可能打工的，这辈子都不可能打工的<br>打工是不可能打工的，这辈子都不可能打工的<br>打工是不可能打工的，这辈子都不可能打工的 </p></blockquote><p>打工是不可能打工的，这辈子都不可能打工的<br><div class="note primary"><p>推荐使用后面说的<strong>内置标签</strong>来引入，效果更好<br>使用&gt;的嵌套格式，没有效果</p></div></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表有无序和有序之分，考虑到用实际使用无序列表居多，这里只介绍无序列表，无序列表使用空格的缩进来表示层级，+和- 都是他的关键字符,此外给-/+ 和文字中间加入 [ ] 可以有计划表的效果<br><strong>写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ 计划A</span><br><span class="line">  + [ ] A计划第一步</span><br><span class="line">    +  [x]首先XXX</span><br><span class="line">- [ ] 计划B</span><br><span class="line">  - [ ] B计划第一步</span><br><span class="line">    -  [x]首先XXX</span><br></pre></td></tr></table></figure><br><strong>效果</strong></p><ul><li>计划A<ul><li style="list-style: none"><input type="checkbox"> A计划第一步<ul><li style="list-style: none"><input type="checkbox" checked> 首先XXX</li></ul></li></ul></li></ul><ul><li style="list-style: none"><input type="checkbox"> 计划B<ul><li style="list-style: none"><input type="checkbox"> B计划第一步<ul><li style="list-style: none"><input type="checkbox" checked> 首先XXX</li></ul></li></ul></li></ul><div class="note danger"><p>注意：关键字符与文字要有空格，[]中间要用空格打开，否则不生效     </p></div><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](图片链接 &quot;optional title&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>Alt text：图片的Alt标签，用来描述图片的关键词，可以不写。最初的本意是当图片因为某种原因不能被显示时而出现的替代文字，后来又被用于SEO，可以方便搜索引擎根据Alt text里面的关键词搜索到图片。<br> 图片链接：可以是图片的本地地址或者是网址。<br> “optional title”：鼠标悬置于图片上会出现的标题文字，可以不写。</p><footer><strong>@tahr</strong><cite><a href="https://www.zhihu.com/question/21065229/answer/132993179" target="_blank" rel="noopener">www.zhihu.com/question/21065229/answer/132993179</a></cite></footer></blockquote><div class="note danger"><p>原生的语法使用效果不好，推荐使用后面hexo以及next的插入图片对应标签语法</p></div><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头与其他行<br><strong>写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 名字 | 性别 | 年龄 |</span><br><span class="line">| ---- | ---- | --- |</span><br><span class="line">| 张三 | 男 |  18 |</span><br><span class="line">| 赵淑芬 | 女 | 20 |</span><br></pre></td></tr></table></figure><br><strong>效果</strong></p><table><thead><tr><th>名字</th><th>性别</th><th>年龄</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>18</td></tr><tr><td>赵淑芬</td><td>女</td><td>20</td></tr></tbody></table><div class="note danger"><p>注意：为了使 Markdown 更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外不需要）</p></div><div class="note primary"><p>如果想改变表格的对齐方式：需要在表头下方的分割线标记中加入 ：<br>此外，表格中可以放其他的markdown的标记 </p></div><ul><li>:— 代表左对齐</li><li>:–: 代表居中对齐</li><li>—: 代表右对齐</li><li>默认是左对齐<br><strong>写法</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 名字 | 性别 | 年龄 |</span><br><span class="line">| ----: | :----: | :--- |</span><br><span class="line">| 张三 | 男 |  18 |</span><br><span class="line">| 赵淑芬 | 女 | 20 |</span><br></pre></td></tr></table></figure><strong>效果</strong></li></ul><table><thead><tr><th style="text-align:right">名字</th><th style="text-align:center">性别</th><th style="text-align:left">年龄</th></tr></thead><tbody><tr><td style="text-align:right">张三</td><td style="text-align:center">男</td><td style="text-align:left">18</td></tr><tr><td style="text-align:right">赵淑芬</td><td style="text-align:center">女</td><td style="text-align:left">20</td></tr></tbody></table><h1 id="hexo-的标签语法"><a href="#hexo-的标签语法" class="headerlink" title="hexo 的标签语法"></a>hexo 的标签语法</h1><p>hexo 为了显示的效果更好，自身定义了一些标签插件，<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" title="hexo中文文档链接" target="_blank" rel="noopener">hexo中文文档链接</a></p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="普通的引用"><a href="#普通的引用" class="headerlink" title="普通的引用"></a>普通的引用</h3><p>在blockquote后面不写任何参数，就只是单纯的引用，效果与使用&gt;一样</p><h3 id="对书上语言的引用"><a href="#对书上语言的引用" class="headerlink" title="对书上语言的引用"></a>对书上语言的引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote 作者, 出处 %&#125;</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>黑夜无论怎样悠长，白昼总会到来。</p><footer><strong>莎士比亚</strong><cite>麦克白</cite></footer></blockquote><h3 id="对网络上的引用"><a href="#对网络上的引用" class="headerlink" title="对网络上的引用"></a>对网络上的引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @作者 网络地址 %&#125;</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有时候，“爱国”，是一个空洞的词语。更多的人是在言语里，在诗歌里”爱国“，他们没有一点点实际行动，甚至充满抱怨。</p><footer><strong>@余秀华</strong><cite><a href="http://blog.sina.com.cn/yuxiuhua1976" target="_blank" rel="noopener">blog.sina.com.cn/yuxiuhua1976</a></cite></footer></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h3><p>在codeblock不加任何参数的标签，和使用`（单行的时候使用）以及` ` `（多行的时候使用）效果一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock  %&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br></pre></td></tr></table></figure><h3 id="带有使用语言的代码块（有高亮）"><a href="#带有使用语言的代码块（有高亮）" class="headerlink" title="带有使用语言的代码块（有高亮）"></a>带有使用语言的代码块（有高亮）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:JavaScript %&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"我叫丰木木"</span>)</span><br></pre></td></tr></table></figure><h3 id="带有说明的代码块"><a href="#带有说明的代码块" class="headerlink" title="带有说明的代码块"></a>带有说明的代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock js控制台输出语句 %&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>控制台输出语句</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br></pre></td></tr></table></figure><h3 id="附带有说明网址的代码块"><a href="#附带有说明网址的代码块" class="headerlink" title="附带有说明网址的代码块"></a>附带有说明网址的代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock 控制台输出语句 https://developer.mozilla.org/zh-CN/docs/Web/API/Console/log 查看MDN相关解释%&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>控制台输出语句</span><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console/log" target="_blank" rel="noopener">查看MDN相关解释</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br></pre></td></tr></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h3><p>使用```  [title] [lang:language] [url] [link text] ``` 一样可以使用以上几个标签效果<br><div class="note danger"><p>注意：反引号代码块后面的参数 在本博客环境下实测没有效果，也就是说使用`是可以当做普通代码块使用</p></div></p><h3 id="插入iframe"><a href="#插入iframe" class="headerlink" title="插入iframe"></a>插入iframe</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h3 id="插入image"><a href="#插入image" class="headerlink" title="插入image"></a>插入image</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><h3 id="插入Include-Code"><a href="#插入Include-Code" class="headerlink" title="插入Include Code"></a>插入Include Code</h3><p>插入<code>source</code>文件夹中的代码文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</span><br></pre></td></tr></table></figure></p><h1 id="next中的标签"><a href="#next中的标签" class="headerlink" title="next中的标签"></a>next中的标签</h1><p><a href="http://theme-next.iissnan.com/tag-plugins.html" title="next文档中文传门" target="_blank" rel="noopener">next文档中文传门</a></p><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签别名 --&gt;</span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>当我看到人和草木一样生长繁衍，<br>任凭同一个老天他们鼓励阻拦。<br>青春时蓬蓬勃勃，全盛时又该走向凋落，<br>繁华和璀璨都将从记忆中消散。<br><strong>——Shakespeare 《莎士比亚十四行诗》</strong></p></blockquote><h3 id="插入的图片变大"><a href="#插入的图片变大" class="headerlink" title="插入的图片变大"></a>插入的图片变大</h3><p><strong>使用方式</strong></p><ul><li>HTML方式：使用这种方式时，为 img 添加属性 class=”full-image”即可。</li><li>标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔。<figure class="highlight plain"><figcaption><span>突破容器宽度限制的图片</span><a href="http://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">文档链接</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;full-image&quot; 是必须的 --&gt;</span><br><span class="line">&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/image-url&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;title&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 别名 --&gt;</span><br><span class="line">&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/image-url&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;title&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; </span><br><span class="line">xxxxxxxxxxxxxxxxxxx </span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>class_name 数值可以为</p><ul><li>default</li><li>primary</li><li>success</li><li>info</li><li>warning</li><li>danger</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入坑了一个新的主题-next,发现他有一些markdown的语法比较特殊，所以整理了一下相关的信息。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://fengmumu1.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://fengmumu1.github.io/tags/hexo/"/>
    
      <category term="markdown语法" scheme="https://fengmumu1.github.io/tags/markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一个文件</title>
    <link href="https://fengmumu1.github.io/2018/06/28/fist%20document/"/>
    <id>https://fengmumu1.github.io/2018/06/28/fist document/</id>
    <published>2018-06-28T11:57:29.000Z</published>
    <updated>2018-07-03T01:30:45.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个文件"><a href="#第一个文件" class="headerlink" title="第一个文件"></a>第一个文件</h1><p>浪费了大半天，试着用hexo在github上建了一个博客，就一个感觉：小屏幕太毁眼睛了<br><a id="more"></a><br>目前先这样后期有如下安排</p><ul><li>熟悉hexo</li><li>修改目前正在使用的<a href="https://github.com/GallenHu/hexo-theme-Daily" target="_blank" rel="noopener">appollo模版</a></li><li>写学习笔记</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一个文件&quot;&gt;&lt;a href=&quot;#第一个文件&quot; class=&quot;headerlink&quot; title=&quot;第一个文件&quot;&gt;&lt;/a&gt;第一个文件&lt;/h1&gt;&lt;p&gt;浪费了大半天，试着用hexo在github上建了一个博客，就一个感觉：小屏幕太毁眼睛了&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://fengmumu1.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="杂谈" scheme="https://fengmumu1.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
