<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>丰木木de学习计划</title>
  
  <subtitle>We are here to put a dent in the universe</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fengmumu1.github.io/"/>
  <updated>2018-07-03T01:32:41.439Z</updated>
  <id>https://fengmumu1.github.io/</id>
  
  <author>
    <name>丰林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>发现个异或的妙用</title>
    <link href="https://fengmumu1.github.io/2018/07/02/Single-Number/"/>
    <id>https://fengmumu1.github.io/2018/07/02/Single-Number/</id>
    <published>2018-07-02T13:35:45.000Z</published>
    <updated>2018-07-03T01:32:41.439Z</updated>
    
    <content type="html"><![CDATA[<p>有个题目是这样子的：<a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="noopener">Single Number</a><br>题目要求如下：Given a non-empty array of integers, every element appears twice except for one. Find that single one.<br>Note:<br>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?<br>意思就是一个数组[2，2，3，3，5] 5就是那个 single numble了<br>然后自己想了半天也就会笨办法，倒也能通过，然后看了一下前面人的解法,又一次打开了脑洞<br><a id="more"></a><br>大佬的代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!nums || nums.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> res = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res ^= nums[i];    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br>一开始我还没有看懂为什么异或就可以，不就是相同为0，不同为1啊，然后单步进去运行了一下，还是一头雾水（单步的时候res没有规律），出去上个厕所，喝口水。然后突然想到，从把数组所有的数字全拿出来，一个一个异或，可以看成相同的和相同的异或，然后得到的是0 ，最后剩下一个奇数的single number，把他和0异或（^）就得到他本身啊。</p><div class="note info"><p>多动动，多喝水，没事上个厕所，买个小黄鸭，换个角度，问题就迎刃而解啊啊啊啊啊啊！！！！</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有个题目是这样子的：&lt;a href=&quot;https://leetcode.com/problems/single-number/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Single Number&lt;/a&gt;&lt;br&gt;题目要求如下：Given a non-empty array of integers, every element appears twice except for one. Find that single one.&lt;br&gt;Note:&lt;br&gt;Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?&lt;br&gt;意思就是一个数组[2，2，3，3，5] 5就是那个 single numble了&lt;br&gt;然后自己想了半天也就会笨办法，倒也能通过，然后看了一下前面人的解法,又一次打开了脑洞&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="思路" scheme="https://fengmumu1.github.io/tags/%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>从Power_of_Two所得</title>
    <link href="https://fengmumu1.github.io/2018/07/02/leetode-Power-of-Two-think/"/>
    <id>https://fengmumu1.github.io/2018/07/02/leetode-Power-of-Two-think/</id>
    <published>2018-07-02T07:21:40.000Z</published>
    <updated>2018-07-02T08:22:31.606Z</updated>
    
    <content type="html"><![CDATA[<p>开始刷leetcode上的题目了，毕竟写程序也是需要开脑洞的，刷题目就能让自己脑洞越来越大的说，这不发现了一个题目： <a href="https://leetcode.com/problems/power-of-two/description/" target="_blank" rel="noopener">Power of Two</a><br>题目要求：<br>Given an integer, write a function to determine if it is a power of two.<br>其实就是让你看一个数是不是2的幂次方<br><a id="more"></a></p><hr><p>先说我的思路吧，一个数一直除以2，除到他小于4的时候，2的幂方数就是只有 2  1 这两个数字了，那么我判断一下是不是他俩就好啦<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isPowerOfTwo = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> wx = n</span><br><span class="line">  <span class="keyword">var</span> falg = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (falg == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// wx = wx &gt;&gt; 1</span></span><br><span class="line">    wx = wx / <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> (wx &lt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="comment">//需要考虑一开始就是1的情况</span></span><br><span class="line">      <span class="keyword">if</span> (wx == <span class="number">2</span> || wx == <span class="number">1</span> || wx == <span class="number">0.5</span>) &#123;</span><br><span class="line">        falg = <span class="number">1</span></span><br><span class="line">        <span class="comment">// console.log("true")</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        falg = <span class="number">2</span></span><br><span class="line">        <span class="comment">// console.log("false")</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><p>然后看了看别人的代码，发现了一个很棒的思路，思路就是看 n 与 n-1 与出来的结果是不是 0<br>我们看一下  4 二进制是：0100 那么3呢，3是 0011，二者与出来就是0，所以这个思路太赞了，一下子就得出结果了。代码是没有的，思路都有了，代码还写不出来吗！</p><hr><p>又发现了个看数字是不是4的幂的题<br>我的想法是 先看他是不是2的幂，再看他是不是小于10，小于的话，等不等于 4 或者 8<br>然后发现了一个想法是，先看是不是2 的幂，然后看能不能整除4<br>然后又发现了个是不是3的幂的数，我的思路是利用数学规则（各个位相加为三的倍数）看他是不是能被3整除，能的话就除以3，用结果继续这样子判断，一直到他小于10的时候，看是不是 3 或者 9<br>结果发现了一个更惊为天人的思路，思路是这样子的，把可以取值范围内的最大3的幂数求出来，记为 a , 然后给个数字b 如果 a % b === 0那b就是3的幂数，没有想到的话看下面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 3 * 3 * 3 * 3 * 3 *3 *3   </span><br><span class="line">b = 3 * 3 * 3 </span><br><span class="line">c = 3 * 3 * 4</span><br></pre></td></tr></table></figure></p><p>这个就很直观了吧！</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始刷leetcode上的题目了，毕竟写程序也是需要开脑洞的，刷题目就能让自己脑洞越来越大的说，这不发现了一个题目： &lt;a href=&quot;https://leetcode.com/problems/power-of-two/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Power of Two&lt;/a&gt;&lt;br&gt;题目要求：&lt;br&gt;Given an integer, write a function to determine if it is a power of two.&lt;br&gt;其实就是让你看一个数是不是2的幂次方&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="https://fengmumu1.github.io/tags/leetcode/"/>
    
      <category term="算法" scheme="https://fengmumu1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="思路" scheme="https://fengmumu1.github.io/tags/%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>给文章加入版权信息</title>
    <link href="https://fengmumu1.github.io/2018/07/02/tip-copyright/"/>
    <id>https://fengmumu1.github.io/2018/07/02/tip-copyright/</id>
    <published>2018-07-02T02:22:30.000Z</published>
    <updated>2018-07-03T01:30:27.442Z</updated>
    
    <content type="html"><![CDATA[<p>看到别人的的博客下面都有版权信息（就是本文最底下的那个啦），然后自己也想加上一个，搜了一下都是17年的老文章，用的是自定义的方法。<br>本来打算去DIY一下，然后突发奇想去主题插件搜了一下版权（copyright），然后发现了这个东西<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: false</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>就把那个<code>enable: false</code> 改成<code>enable: true</code> 就好啦<br><code>`</code></p><hr><p>ps:如果底下的版权信息中的本文链接：成了<code>http://yoursite.com/2018/07/02/tip-copyright</code>这个样子<br>只需要在网站配置文件下把url: <a href="http://yoursite.com" target="_blank" rel="noopener">http://yoursite.com</a> 改成url: <a href="https://fengmumu1.github.io">https://fengmumu1.github.io</a> 就好啦</p><p>有一篇博文还可以，就是关于next配置的，不过文章写的时间有点老，方法都还是有效果的，不过新的next版本会有更好的实现方式，所以不要以为的抄啦。 <a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener">文章传送门</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到别人的的博客下面都有版权信息（就是本文最底下的那个啦），然后自己也想加上一个，搜了一下都是17年的老文章，用的是自定义的方法。&lt;br&gt;本来打算去DIY一下，然后突发奇想去主题插件搜了一下版权（copyright），然后发现了这个东西&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://fengmumu1.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://fengmumu1.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的数字存储</title>
    <link href="https://fengmumu1.github.io/2018/06/30/js-number/"/>
    <id>https://fengmumu1.github.io/2018/06/30/js-number/</id>
    <published>2018-06-30T08:07:05.000Z</published>
    <updated>2018-07-02T02:14:08.429Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript中数字是不区分整数值与浮点数值的，在JavaScript中所有的数均使用64位的浮点格式来存储以及表示（IEEE 754标准）。所以数值最大是：±1.7976931348623157 X 10^308最小是±5X10^-324，可以表示的整数范围是-9 007 199 254 740 992~9 007 199 254 740 992 （对应的是-2^53~2^53）包含边界值。<br><div class="note danger"><p>注意：在对JS中的数值进行位操作的时候会自动把64位转化为32进行操作（由于运算符的自身限制，其只能对32位进行操作），在对小数进行位操作 比如左移零位，小数会丢弃小数部分转化成整数 </p></div><br><a id="more"></a></p><h3 id="JavaScript中数字不一定很准确"><a href="#JavaScript中数字不一定很准确" class="headerlink" title="JavaScript中数字不一定很准确"></a>JavaScript中数字不一定很准确</h3><p>首先我们先看一段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0</span></span><br><span class="line"><span class="keyword">var</span> y = <span class="number">0</span></span><br><span class="line">x = <span class="number">.3</span> - <span class="number">.2</span></span><br><span class="line">y = <span class="number">.2</span> - <span class="number">.1</span></span><br><span class="line"><span class="built_in">console</span>.log(x == <span class="number">.1</span> )</span><br><span class="line"><span class="built_in">console</span>.log(y == <span class="number">.1</span> )</span><br></pre></td></tr></table></figure><br>运行结果是 false 和 true<br>讲道理的说0.3 - 0.2 = 0.1;0.2-0.1 = 0.1 这个是正确的，那么为什么到了JS的代码里就不正确了，解决这个问题，我们首先要看一下JS的数字是如何存储的。</p><h3 id="JS数字的存储"><a href="#JS数字的存储" class="headerlink" title="JS数字的存储"></a>JS数字的存储</h3><p>在本文的前言中我们说到了JS用的是IEEE754标准，这个标准规定了浮点数的表示方法（此方法也是目前通用计算机所才用的浮点数存数方式）。在此标准中浮点数有float和double两种存储形式，但由于JS是一种弱类型编程语言他的数字采用了double类型存储，也就是我们常说的使用64位来存储数字的双精度型。那么我们是如何利用这64位来存储数据的呢？    我们都知道科学计数法，即把一个数比如123465.555可以写成1.23456555<em>10^5，这样子不仅读写方便也能减少存数该数字的空间，123456.555是一个十进制的数字，那么我们是把一个二进制的数字是否也可以转化成这个形式，以达到减少存数空间的目的，答案是肯定的。我们把一个十进制数比如：<strong>3.25</strong> 写成二进制的形式：<strong>11001.01</strong>，类比十进制的写法，我们可以把他写成 **1.100101\</em>2^4<strong>，现在我们看一下这个数字，他由有效数字 </strong>1.100101<strong> 以及指数 </strong>2^4** 以及我们省略了的符号位组成（正数的符号位是 + 负数的是- 零的话严格来说不属于正负，计算机如何处理他我们后文将解释），那么64位的空间我们就知道需要放三大块的东西了：有效数字、指数、符号位</p><ul><li>sign bit(符号）：我们在64位的最高位放置符号位，最高位为1，表示数字是正数还是负数</li><li>exponent(指数):我们在从左往右再取11位用来表示指数</li><li>mantissa(尾数):我们把剩余的52位空间全部用来存储有效数字 <img src="/2018/06/30/js-number/64w.jpg" title="64位存储示意图"><div class="note primary"><p>1.为了最大限度的利用存储有效数字的52位，我们把小数点以及小数点前的那一个数字给省略掉（正确的化简后尾数会被处理到大于等于1而小于2的区间内，这时候便可省去前导的“1”），所以我们只需要存贮小数点后面的 <strong>100101</strong>就可以了<br>2.在上图中存储指数的数值叫做阶码，有它转换出来的阶码的数值等于指数的数值，阶码=指数+1023 (科学计数法中的指数是可以为负数的，所以约定减去一个中间数 1023，[0,1022] 表示为负，[1024,2047] 表示为正)。在 ECMAScript 规范里有给出指数的范围： [-1074, 971] 。</p></div><h3 id="为什么会出现数字不准确"><a href="#为什么会出现数字不准确" class="headerlink" title="为什么会出现数字不准确"></a>为什么会出现数字不准确</h3>现在我们知道了一个数是如何存储的，那么我们来想一个问题，1.3转化为二进制是多少<code>0.010011001100....1100</code>，对的你发现了他的小数部分除不尽，那么意味着他的小数部分用64位表示不完。我们来看一下浏览器是如何处理的。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1.3</span> </span><br><span class="line"><span class="built_in">console</span>.log(a.toString(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>输出的结果是 <strong>1.010011001100110011001100110011001100110011001100110011</strong><br>我们来比较一下浏览器计算的1.3和我们手算的1.3的差别<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">浏览器： 1.0100110011001100110011001100110011001100110011001101</span><br><span class="line">手 算 ： 1.0100110011001100110011001100110011001100110011001100*1100*</span><br></pre></td></tr></table></figure></li></ul><p>我们看到浏览器进行了进位操作，浏览器执行的是满1进位，不满则省略的方案<br>所以这也就是为什么我们在进行浮点数运算的时候有时候得不到精确的数值的原因所在了。</p><h3 id="为什么-0-3-0-3"><a href="#为什么-0-3-0-3" class="headerlink" title="为什么 0.3 == 0.3"></a>为什么 0.3 == 0.3</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">0.3</span></span><br><span class="line"><span class="built_in">console</span>.log( x === <span class="number">0.3</span> )</span><br></pre></td></tr></table></figure><p>它的运行结果是true<br>前面不是说使用浮点数存储，小数部分出现循环后，系统存的不是一个准确数值，那么这里为什么会是true呢？<br>因为 尾数(mantissa) 固定长度是 52 位，再加上省略的一位，最多可以表示的数是 2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度（也就是说按照52个尾数全为0到其全为1，让其对应以十进制表示的从1到9007199254740992[注意我们省略了小数点前面的一位，所以计算的时候应该按照53位计算]）。它的长度是 16，所以可以近似使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理。于是就有 x.toPrecision(16) === 0.3<br><div class="note primary"><p>toPrecision(16) 是先把二进制保存的不精确的那个数，转化为十进制数。然后是对十进制的数字再去保留小数点后的16位</p></div></p><h3 id="大数危机"><a href="#大数危机" class="headerlink" title="大数危机"></a>大数危机</h3><p>如果有数字处于2^53到2^63之间呢，他们是是如何取舍的</p><ul><li>(2^53, 2^54) 之间的数会两个选一个，只能精确表示偶数</li><li>(2^54, 2^55) 之间的数会四个选一个，只能精确表示4个倍数… </li><li>依次跳过更多2的倍数<br>我们来看一张图（图是我偷得）<img src="/2018/06/30/js-number/da.jpg" title="实数与浮点数的对应">我们可以看到在中间的部分，实数与浮点数还可以近似的一一对应，越往两边用浮点数与实数对应关系就越差，也就是说精度就逐渐的丢失</li></ul><blockquote><p>要想解决大数的问题你可以引用第三方库<a href="https://github.com/MikeMcl/bignumber.js/" target="_blank" rel="noopener">bignumber.js</a>，原理是把所有数字当作字符串，重新实现了计算逻辑，缺点是性能比原生的差很多，所以原生支持大数就很有必要了。TC39 已经有一个 Stage 3 的提案<a href="https://github.com/tc39/proposal-bigint" target="_blank" rel="noopener">proposal bigint</a>，大数问题有望彻底解决。在浏览器正式支持前，可以使用<a href="https://github.com/peterolson/BigInteger.js" target="_blank" rel="noopener">Babel 7.0</a> 来实现，它的内部是自动转换成 big-integer 来计算，这样能保持精度但运算效率会降低。</p><footer><strong>@camsong</strong><cite><a href="https://zhuanlan.zhihu.com/p/30703042" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/30703042</a></cite></footer></blockquote><p>toPrecision 和 toFixed</p><ul><li>toPrecision 是处理精度，精度是从左至右第一个不为0的数开始数起。</li><li>toFixed 是小数点后指定位数取整，从小数点开始数起。<br>两者都能对多余数字做凑整处理，也有些人用 toFixed 来做四舍五入，但注意它是有坑的。<br>比如1.055.toFixed(2) = 1.05 问题是他的第三位明明是5啊，说好的四舍五入呢？<br>因为1.055实际对应的数字是1.0499999999 所以就出现前面的结果啦<blockquote><p>当你拿到 1.4000000000000001 这样的数据要展示时，建议使用 toPrecision 凑整并 parseFloat 转成数字后再显示。<br>对于运算类操作，如 +-*/，就不能使用 toPrecision 了。正确的做法是把小数转成整数后再运算。<br>ps:</p><ul><li>1.以上内容是原文章的删减内容，需要看原文章内容，下面有链接</li><li>2.toPrecision 取一个经验数值 12 即可</li><li>3.原文推荐了一个js处理浮点数的类库，大小只有1K，传送门: <a href="https://github.com/nefe/number-precision" target="_blank" rel="noopener">number-precision</a></li></ul><footer><strong>@camsong</strong><cite><a href="https://zhuanlan.zhihu.com/p/30703042" target="_blank" rel="noopener">zhuanlan.zhihu.com/p/30703042</a></cite></footer></blockquote>现在我们继续看这样一行代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9999999999999999 == 10000000000000000</span><br></pre></td></tr></table></figure></li></ul><p>结果是true，这个又是为什么呢？<br>我们在前面说到e的范围是 [-1074, 971] ，也就是说他能保存的最大的数字是<br>1 x (2^53 - 1) x 2^971 = 1.7976931348623157e+308<br><div class="note primary"><ol><li>52个1就等于 2^53 - 1</li><li>注意结果要补上我们省略的那个1.</li></ol></div><br>类似的整数部分最小的是：1 x 1 x 2^(-1074) = 5e-324<br>由此我们可以知道：<br>Number.MAX_VALUE 以及 Number.MIN_VALUE 的两个数值了<br><div class="note danger"><p>注意：Number.MIN_VALUE 只是正数中最小的数字，实数最小的数字是 -Number.MAX_VALUE</p></div></p><p>现在结合前面所有的知识回过头来看一下，js中最大的数字是 Number.MAX_VALUE ，他是尾数为 2^53 指数为971 时候的数字<br>那么 如果有个数值他转成二进制的科学计数法之后，尾数大于2^53次方呢，这时候由于计算机会有一定的取舍（前文已经说过，具体的取舍方法有四条，有兴趣的可以自行维基解密），所以他的存储就有了误差。<br>所以经过了取舍的两个大数就相同了，</p><div class="note danger"><p>注意：其实现在我们可以发现在浮点数的时候虽然最大是 Number.MAX_VALUE，但是他有可能是其他的数值取舍得来，所以小于2^53的数值才是可以正确表示的数值，所以就有了 Number.MAX_SAFE_INTEGE 这个数值，其表示js中的安全数值</p></div><h3 id="最后八卦几个数值"><a href="#最后八卦几个数值" class="headerlink" title="最后八卦几个数值"></a>最后八卦几个数值</h3><blockquote><p>9007199254740990 (that is, 2^53-2) distinct “Not-a-Number” values of the IEEE Standard are represented in ECMAScript as a single special NaN value. (Note that the NaN value is produced by the program expression NaN.) In some implementations, external code might be able to detect a difference between various Not-a-Number values, but such behaviour is implementation-dependent; to ECMAScript code, all NaN values are indistinguishable from each other.</p><footer><strong>@ECMAScript 规范</strong><cite><a href="http://es5.github.io/#x8.5" target="_blank" rel="noopener">es5.github.io/#x8.5</a></cite></footer></blockquote><p>NAN = 9007199254740990 == 2^53−2  需要注意,NAN只是数值上是这个，但实际上他是有程序生成的所以所以NAN不等于NANHA</p><p>关于无穷大有个有意思的东西<br>首先抛出大佬给的问题（原始博文在最底部）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Number.MAX_VALUE + 1 == Number.MAX_VALUE;</span><br><span class="line">Number.MAX_VALUE + 2 == Number.MAX_VALUE;</span><br><span class="line">...</span><br><span class="line">Number.MAX_VALUE + x == Number.MAX_VALUE;</span><br><span class="line">Number.MAX_VALUE + x + 1 == Infinity;</span><br><span class="line">...</span><br><span class="line">Number.MAX_VALUE + Number.MAX_VALUE == Infinity;</span><br><span class="line"> </span><br><span class="line">// 问题：</span><br><span class="line">// 1. x 的值是什么？</span><br><span class="line">// 2. Infinity - Number.MAX_VALUE == x + 1; 是 true 还是 false ?</span><br></pre></td></tr></table></figure></p><p>放出原博主的解答：<br><blockquote><p>我的想法是这样的：</p><p>Number.MAX_VALUE.toString(16) = ”<br>fffffffffffff800000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000000000000000000<br>00000000000000000000000″</p><p>前面有 13 个 f, 二进制就是 52 个 1<br>还有一个 8, 二进制是 1000<br>也就是说，前面 53 位都是 1</p><p>这样，当 Number.MAX_VALUE + 1 时，1 替代最后一个 0，但 IEEE 754 双精度浮点数的 m 最大为 53（含隐藏位），因此添加的 1 在存储时会被舍弃掉，所以：</p><p>Number.MAX_VALUE + 1 == Number.MAX_VALUE</p><p>同理类推，当 8（1000） 变成 b（1011），b 后面的位取最大值时，依旧有：</p><p>0xfffffffffffffbfffffffffffffffffffffffffffffffffffff<br>fffffffffffffffffffffffffffffffffffffffffffffffffffffff<br>fffffffffffffffffffffffffffffffffffffffffffffffffffffff<br>fffffffffffffffffffffffffffffffffffffffffffffffffffffff<br>ffffffffffffffffffffffffffffffffffffffff == Number.MAX_VALUE</p><p>进一步，当 再增 1, b 变成 c 时，将发生质变：</p><p>0xfffffffffffffc00000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000<br>000000000000000000000000000000000000 == Infinity</p><p>这是因为前面将有 54 个连续的 1, 在存储时，exponent 将由<br>971 变成 972, 超出了 IEEE 754 双精度浮点数存储格式中 e 的<br>最大值，因此质变为 Infinity 了。</p><p>这样，题目中 x 的值就很容易得到了：</p><p>x = 0xfffffffffffffbffff… – 0xfffffffffffff80000…<br>= 0x00000000000003ffff…</p><p>注意这个数在IEEE 754 双精度浮点数格式下无法精确存储。</p><p>还能得到两个有趣的结论：</p><ol><li>Number.MAX_VALUE 不是一个数，而是一个区间 [0xfffffffffffff80000…, 0xfffffffffffffc0000…)</li><li>Infinity 指的是，所有大于等于 0xfffffffffffffc0000… 的数。</li></ol><footer><strong>@lifesinger</strong><cite><a href="https://lifesinger.wordpress.com/2011/03/07/js-precision/" target="_blank" rel="noopener">lifesinger.wordpress.com/2011/03/07/js-precision</a></cite></footer></blockquote></p><hr><p>更新一个知识点： Number.EPSILON 是一个整数，然后与这个整数大的第一个数的差值<br>也就是说如果两个数的差值小于  Number.EPSILON  这两个数就是一个数</p><hr><p>参考文档</p><hr><ol><li>谢大喵的上课视频</li><li>知乎：抓住数据的小尾巴 - JS浮点数陷阱及解法     <a href="https://zhuanlan.zhihu.com/p/30703042" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30703042</a></li><li>lifesinger的博客  <a href="https://lifesinger.wordpress.com/2011/03/07/js-precision/" target="_blank" rel="noopener">https://lifesinger.wordpress.com/2011/03/07/js-precision/</a></li><li>ECMAScript 规范 <a href="http://es5.github.io/#x8.5" target="_blank" rel="noopener">http://es5.github.io/#x8.5</a></li></ol><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript中数字是不区分整数值与浮点数值的，在JavaScript中所有的数均使用64位的浮点格式来存储以及表示（IEEE 754标准）。所以数值最大是：±1.7976931348623157 X 10^308最小是±5X10^-324，可以表示的整数范围是-9 007 199 254 740 992~9 007 199 254 740 992 （对应的是-2^53~2^53）包含边界值。&lt;br&gt;&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;注意：在对JS中的数值进行位操作的时候会自动把64位转化为32进行操作（由于运算符的自身限制，其只能对32位进行操作），在对小数进行位操作 比如左移零位，小数会丢弃小数部分转化成整数 &lt;/p&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://fengmumu1.github.io/tags/JavaScript/"/>
    
      <category term="数字" scheme="https://fengmumu1.github.io/tags/%E6%95%B0%E5%AD%97/"/>
    
      <category term="存储" scheme="https://fengmumu1.github.io/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>hexo下的markdown语法</title>
    <link href="https://fengmumu1.github.io/2018/06/29/hexo-markdown-grammar/"/>
    <id>https://fengmumu1.github.io/2018/06/29/hexo-markdown-grammar/</id>
    <published>2018-06-29T12:53:40.000Z</published>
    <updated>2018-06-30T04:16:57.048Z</updated>
    
    <content type="html"><![CDATA[<p>入坑了一个新的主题-next,发现他有一些markdown的语法比较特殊，所以整理了一下相关的信息。<br><a id="more"></a></p><h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="文章头部的-front-matter"><a href="#文章头部的-front-matter" class="headerlink" title="文章头部的 front-matter"></a>文章头部的 <code>front-matter</code></h2><p>目前我用的主题是<a href="https://github.com/iissnan/hexo-theme-next/releases" title="netx下载地址" target="_blank" rel="noopener">next</a>，版本是：v5.1.4 ,hexo的版本是3.7.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">title: hexo下的markdown语法</span><br><span class="line">date: 2018-06-29 20:53:40</span><br><span class="line">tags: </span><br><span class="line">  - hexo</span><br><span class="line">  - markdown语法</span><br><span class="line">categories: hexo</span><br></pre></td></tr></table></figure></p><p>以前的tages的写法是 <code>tags: [aa,bb,cc]</code> ，现在我发现tages的写法是：隔行然后缩进前面加中划线，<strong>再加上一个空格</strong>，然后写上标签。<br><div class="note danger"><p>注意：tags 与后面的标签内容必须要有一个空格，在hexo中的很多地方都有这个要求</p></div></p><h2 id="文章相关的语法"><a href="#文章相关的语法" class="headerlink" title="文章相关的语法"></a>文章相关的语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">=====  (等于号)是一级标题</span><br><span class="line">------ （减号）是二级标题</span><br><span class="line">###    是三级标题</span><br></pre></td></tr></table></figure><p>或者使用传统的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#         H1</span><br><span class="line">##        H2</span><br><span class="line">###       H3</span><br><span class="line">...</span><br><span class="line">######    H6</span><br></pre></td></tr></table></figure></p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>单独一行使用<code>***</code>或者<code>——————（下划线）</code></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>使用<code>~~需要删除的文字~~</code>来表示，<del>这个要被删除</del><br><div class="note danger"><p>注意：前后~~与文字没有空格</p></div></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[链接的文字](链接的地址 &quot;鼠标指上后链接显示的文字&quot;)</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>用<code>\</code>来注释，类似于转义字符的效果</p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 打工是不可能打工的，这辈子都不可能打工的 </span><br></pre></td></tr></table></figure><div class="note danger"><p>注意：如果仅在第一行使用 &gt;， 后面相邻的行即使省略 &gt;，也会变成引用内容，可以在结束的语句后面加上两个空格，或者与后面的语句直接空一行</p></div><p><strong>验证写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; 打工是不可能打工的，这辈子都不可能打工的</span><br><span class="line">打工是不可能打工的，这辈子都不可能打工的 </span><br><span class="line">打工是不可能打工的，这辈子都不可能打工的 </span><br><span class="line"></span><br><span class="line">打工是不可能打工的，这辈子都不可能打工的 </span><br></pre></td></tr></table></figure><br><strong>效果</strong></p><blockquote><p>打工是不可能打工的，这辈子都不可能打工的<br>打工是不可能打工的，这辈子都不可能打工的<br>打工是不可能打工的，这辈子都不可能打工的 </p></blockquote><p>打工是不可能打工的，这辈子都不可能打工的<br><div class="note primary"><p>推荐使用后面说的<strong>内置标签</strong>来引入，效果更好<br>使用&gt;的嵌套格式，没有效果</p></div></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表有无序和有序之分，考虑到用实际使用无序列表居多，这里只介绍无序列表，无序列表使用空格的缩进来表示层级，+和- 都是他的关键字符,此外给-/+ 和文字中间加入 [ ] 可以有计划表的效果<br><strong>写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ 计划A</span><br><span class="line">  + [ ] A计划第一步</span><br><span class="line">    +  [x]首先XXX</span><br><span class="line">- [ ] 计划B</span><br><span class="line">  - [ ] B计划第一步</span><br><span class="line">    -  [x]首先XXX</span><br></pre></td></tr></table></figure><br><strong>效果</strong></p><ul><li>计划A<ul><li style="list-style: none"><input type="checkbox"> A计划第一步<ul><li style="list-style: none"><input type="checkbox" checked> 首先XXX</li></ul></li></ul></li></ul><ul><li style="list-style: none"><input type="checkbox"> 计划B<ul><li style="list-style: none"><input type="checkbox"> B计划第一步<ul><li style="list-style: none"><input type="checkbox" checked> 首先XXX</li></ul></li></ul></li></ul><div class="note danger"><p>注意：关键字符与文字要有空格，[]中间要用空格打开，否则不生效     </p></div><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](图片链接 &quot;optional title&quot;)</span><br></pre></td></tr></table></figure><blockquote><p>Alt text：图片的Alt标签，用来描述图片的关键词，可以不写。最初的本意是当图片因为某种原因不能被显示时而出现的替代文字，后来又被用于SEO，可以方便搜索引擎根据Alt text里面的关键词搜索到图片。<br> 图片链接：可以是图片的本地地址或者是网址。<br> “optional title”：鼠标悬置于图片上会出现的标题文字，可以不写。</p><footer><strong>@tahr</strong><cite><a href="https://www.zhihu.com/question/21065229/answer/132993179" target="_blank" rel="noopener">www.zhihu.com/question/21065229/answer/132993179</a></cite></footer></blockquote><div class="note danger"><p>原生的语法使用效果不好，推荐使用后面hexo以及next的插入图片对应标签语法</p></div><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>使用<code>|</code>来分隔不同的单元格，使用<code>-</code>来分隔表头与其他行<br><strong>写法</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 名字 | 性别 | 年龄 |</span><br><span class="line">| ---- | ---- | --- |</span><br><span class="line">| 张三 | 男 |  18 |</span><br><span class="line">| 赵淑芬 | 女 | 20 |</span><br></pre></td></tr></table></figure><br><strong>效果</strong></p><table><thead><tr><th>名字</th><th>性别</th><th>年龄</th></tr></thead><tbody><tr><td>张三</td><td>男</td><td>18</td></tr><tr><td>赵淑芬</td><td>女</td><td>20</td></tr></tbody></table><div class="note danger"><p>注意：为了使 Markdown 更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外不需要）</p></div><div class="note primary"><p>如果想改变表格的对齐方式：需要在表头下方的分割线标记中加入 ：<br>此外，表格中可以放其他的markdown的标记 </p></div><ul><li>:— 代表左对齐</li><li>:–: 代表居中对齐</li><li>—: 代表右对齐</li><li>默认是左对齐<br><strong>写法</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 名字 | 性别 | 年龄 |</span><br><span class="line">| ----: | :----: | :--- |</span><br><span class="line">| 张三 | 男 |  18 |</span><br><span class="line">| 赵淑芬 | 女 | 20 |</span><br></pre></td></tr></table></figure><strong>效果</strong></li></ul><table><thead><tr><th style="text-align:right">名字</th><th style="text-align:center">性别</th><th style="text-align:left">年龄</th></tr></thead><tbody><tr><td style="text-align:right">张三</td><td style="text-align:center">男</td><td style="text-align:left">18</td></tr><tr><td style="text-align:right">赵淑芬</td><td style="text-align:center">女</td><td style="text-align:left">20</td></tr></tbody></table><h1 id="hexo-的标签语法"><a href="#hexo-的标签语法" class="headerlink" title="hexo 的标签语法"></a>hexo 的标签语法</h1><p>hexo 为了显示的效果更好，自身定义了一些标签插件，<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" title="hexo中文文档链接" target="_blank" rel="noopener">hexo中文文档链接</a></p><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="普通的引用"><a href="#普通的引用" class="headerlink" title="普通的引用"></a>普通的引用</h3><p>在blockquote后面不写任何参数，就只是单纯的引用，效果与使用&gt;一样</p><h3 id="对书上语言的引用"><a href="#对书上语言的引用" class="headerlink" title="对书上语言的引用"></a>对书上语言的引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote 作者, 出处 %&#125;</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>黑夜无论怎样悠长，白昼总会到来。</p><footer><strong>莎士比亚</strong><cite>麦克白</cite></footer></blockquote><h3 id="对网络上的引用"><a href="#对网络上的引用" class="headerlink" title="对网络上的引用"></a>对网络上的引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @作者 网络地址 %&#125;</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>有时候，“爱国”，是一个空洞的词语。更多的人是在言语里，在诗歌里”爱国“，他们没有一点点实际行动，甚至充满抱怨。</p><footer><strong>@余秀华</strong><cite><a href="http://blog.sina.com.cn/yuxiuhua1976" target="_blank" rel="noopener">blog.sina.com.cn/yuxiuhua1976</a></cite></footer></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h3 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h3><p>在codeblock不加任何参数的标签，和使用`（单行的时候使用）以及` ` `（多行的时候使用）效果一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock  %&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br></pre></td></tr></table></figure><h3 id="带有使用语言的代码块（有高亮）"><a href="#带有使用语言的代码块（有高亮）" class="headerlink" title="带有使用语言的代码块（有高亮）"></a>带有使用语言的代码块（有高亮）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:JavaScript %&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"我叫丰木木"</span>)</span><br></pre></td></tr></table></figure><h3 id="带有说明的代码块"><a href="#带有说明的代码块" class="headerlink" title="带有说明的代码块"></a>带有说明的代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock js控制台输出语句 %&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>控制台输出语句</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br></pre></td></tr></table></figure><h3 id="附带有说明网址的代码块"><a href="#附带有说明网址的代码块" class="headerlink" title="附带有说明网址的代码块"></a>附带有说明网址的代码块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock 控制台输出语句 https://developer.mozilla.org/zh-CN/docs/Web/API/Console/log 查看MDN相关解释%&#125;</span><br><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><figcaption><span>控制台输出语句</span><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Console/log" target="_blank" rel="noopener">查看MDN相关解释</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;我叫丰木木&quot;)</span><br></pre></td></tr></table></figure><h3 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h3><p>使用```  [title] [lang:language] [url] [link text] ``` 一样可以使用以上几个标签效果<br><div class="note danger"><p>注意：反引号代码块后面的参数 在本博客环境下实测没有效果，也就是说使用`是可以当做普通代码块使用</p></div></p><h3 id="插入iframe"><a href="#插入iframe" class="headerlink" title="插入iframe"></a>插入iframe</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h3 id="插入image"><a href="#插入image" class="headerlink" title="插入image"></a>插入image</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><h3 id="插入Include-Code"><a href="#插入Include-Code" class="headerlink" title="插入Include Code"></a>插入Include Code</h3><p>插入<code>source</code>文件夹中的代码文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] path/to/file %&#125;</span><br></pre></td></tr></table></figure></p><h1 id="next中的标签"><a href="#next中的标签" class="headerlink" title="next中的标签"></a>next中的标签</h1><p><a href="http://theme-next.iissnan.com/tag-plugins.html" title="next文档中文传门" target="_blank" rel="noopener">next文档中文传门</a></p><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;blah blah blah&lt;/blockquote&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签别名 --&gt;</span><br><span class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><blockquote class="blockquote-center"><p>当我看到人和草木一样生长繁衍，<br>任凭同一个老天他们鼓励阻拦。<br>青春时蓬蓬勃勃，全盛时又该走向凋落，<br>繁华和璀璨都将从记忆中消散。<br><strong>——Shakespeare 《莎士比亚十四行诗》</strong></p></blockquote><h3 id="插入的图片变大"><a href="#插入的图片变大" class="headerlink" title="插入的图片变大"></a>插入的图片变大</h3><p><strong>使用方式</strong></p><ul><li>HTML方式：使用这种方式时，为 img 添加属性 class=”full-image”即可。</li><li>标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔。<figure class="highlight plain"><figcaption><span>突破容器宽度限制的图片</span><a href="http://theme-next.iissnan.com/tag-plugins.html" target="_blank" rel="noopener">文档链接</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class="line">&lt;!-- 其中 class=&quot;full-image&quot; 是必须的 --&gt;</span><br><span class="line">&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class="line">&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/image-url&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;title&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 别名 --&gt;</span><br><span class="line">&lt;span itemprop=&quot;image&quot; itemscope itemtype=&quot;http://schema.org/ImageObject&quot;&gt;&lt;img itemprop=&quot;url image&quot; src=&quot;/image-url&quot; class=&quot;full-image&quot; alt=&quot;alt&quot; title=&quot;title&quot; /&gt;&lt;meta itemprop=&quot;width&quot; content=&quot;auto&quot;&gt;&lt;meta itemprop=&quot;height&quot; content=&quot;auto&quot;&gt;&lt;/span&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="Bootstrap-Callout"><a href="#Bootstrap-Callout" class="headerlink" title="Bootstrap Callout"></a>Bootstrap Callout</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note class_name %&#125; </span><br><span class="line">xxxxxxxxxxxxxxxxxxx </span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>class_name 数值可以为</p><ul><li>default</li><li>primary</li><li>success</li><li>info</li><li>warning</li><li>danger</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入坑了一个新的主题-next,发现他有一些markdown的语法比较特殊，所以整理了一下相关的信息。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://fengmumu1.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://fengmumu1.github.io/tags/hexo/"/>
    
      <category term="markdown语法" scheme="https://fengmumu1.github.io/tags/markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>第一个文件</title>
    <link href="https://fengmumu1.github.io/2018/06/28/fist%20document/"/>
    <id>https://fengmumu1.github.io/2018/06/28/fist document/</id>
    <published>2018-06-28T11:57:29.000Z</published>
    <updated>2018-07-03T01:30:45.540Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个文件"><a href="#第一个文件" class="headerlink" title="第一个文件"></a>第一个文件</h1><p>浪费了大半天，试着用hexo在github上建了一个博客，就一个感觉：小屏幕太毁眼睛了<br><a id="more"></a><br>目前先这样后期有如下安排</p><ul><li>熟悉hexo</li><li>修改目前正在使用的<a href="https://github.com/GallenHu/hexo-theme-Daily" target="_blank" rel="noopener">appollo模版</a></li><li>写学习笔记</li></ul><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一个文件&quot;&gt;&lt;a href=&quot;#第一个文件&quot; class=&quot;headerlink&quot; title=&quot;第一个文件&quot;&gt;&lt;/a&gt;第一个文件&lt;/h1&gt;&lt;p&gt;浪费了大半天，试着用hexo在github上建了一个博客，就一个感觉：小屏幕太毁眼睛了&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="https://fengmumu1.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="杂谈" scheme="https://fengmumu1.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
</feed>
